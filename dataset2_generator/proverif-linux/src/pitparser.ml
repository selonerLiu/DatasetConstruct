type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | AT
  | IDENT of (Pitptree.ident)
  | TAG of (Pitptree.ident)
  | STRING of (Pitptree.ident)
  | PROJECTION of (Pitptree.ident)
  | UNDERSCORE of (Parsing_helper.extent)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | SELECT
  | PHASE
  | BARRIER
  | AMONG
  | WEAKSECRET
  | PARAM
  | ORTEXT
  | FAIL
  | LESS
  | GREATER
  | GEQ
  | PLUS
  | MINUS
  | TYPE
  | SET
  | FORALL
  | CONST
  | INJEVENT
  | OR
  | CHANNEL
  | LETFUN
  | DEFINE
  | EXPAND
  | YIELD
  | LEQ
  | PROBA
  | LETPROBA
  | OPTIMIF
  | ISCST
  | COUNT
  | FLOAT of (float)
  | LBRACE
  | RBRACE
  | PROOF
  | IMPLEMENTATION
  | EQUIVALENCE
  | OTHERWISE
  | FOREACH
  | DO
  | SECRET
  | PUBLICVARS
  | RANDOM
  | LEFTARROW
  | POWER
  | LEMMA
  | AXIOM
  | RESTRICTION
  | FOR
  | TABLE
  | INSERT
  | GET

open Parsing;;
let _ = parse_error;;
# 2 "pitparser.mly"
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2023                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

*)
# 31 "pitparser.mly"

open Parsing_helper
open Ptree
open Pitptree

let zero () = PIdent (("0",parse_extent())), parse_extent()

let rec unfold_int t = function
  | 0 -> t
  | n -> PFunApp(("+", parse_extent()), [unfold_int t (n-1)]), parse_extent()

 let rec unfold_int_minus t = function
   | 0 -> t
   | n -> PFunApp(("- "^(string_of_int n), parse_extent()), [t]), parse_extent()

let gzero () = PGIdent (("0",parse_extent())), parse_extent()

let rec unfold_gint t = function
  | 0 -> t
  | n -> PGFunApp(("+", parse_extent()), [unfold_gint t (n-1)], None), parse_extent()

let pzero () = PPIdent (("0",parse_extent())), parse_extent()

let rec unfold_pint t = function
  | 0 -> t
  | n -> PPFunApp(("+", parse_extent()), [unfold_pint t (n-1)]), parse_extent()

let rec unfold_pint_minus t = function
  | 0 -> t
  | n -> PPFunApp(("- "^(string_of_int n), parse_extent()), [t]), parse_extent()

let pat_zero () = PPatFunApp (("0",parse_extent()), [])

let rec unfold_pat_int t = function
  | 0 -> t
  | n -> PPatFunApp(("+", parse_extent()), [unfold_pat_int t (n-1)])

let pfg_zero () = PFGIdent (("0",parse_extent())), parse_extent()

let rec unfold_pfg_int t = function
  | 0 -> t
  | n -> PFGFunApp(("+", parse_extent()), [unfold_pfg_int t (n-1)]), parse_extent()


exception Syntax

# 182 "pitparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  269 (* AT *);
  276 (* REPL *);
  277 (* IF *);
  278 (* THEN *);
  279 (* ELSE *);
  280 (* EQUAL *);
  281 (* FUN *);
  282 (* EQUATION *);
  283 (* REDUCTION *);
  284 (* PREDICATE *);
  285 (* PROCESS *);
  286 (* SLASH *);
  287 (* DOT *);
    0 (* EOF *);
  288 (* LET *);
  289 (* QUERY *);
  290 (* BEFORE *);
  291 (* PUTBEGIN *);
  292 (* NONINTERF *);
  293 (* EVENT *);
  294 (* NOT *);
  295 (* ELIMTRUE *);
  296 (* FREE *);
  297 (* SUCHTHAT *);
  298 (* CLAUSES *);
  299 (* RED *);
  300 (* EQUIV *);
  301 (* EQUIVEQ *);
  302 (* WEDGE *);
  303 (* DIFF *);
  304 (* COLON *);
  305 (* NOUNIF *);
  306 (* SELECT *);
  307 (* PHASE *);
  308 (* BARRIER *);
  309 (* AMONG *);
  310 (* WEAKSECRET *);
  311 (* PARAM *);
  312 (* ORTEXT *);
  313 (* FAIL *);
  314 (* LESS *);
  315 (* GREATER *);
  316 (* GEQ *);
  317 (* PLUS *);
  318 (* MINUS *);
  319 (* TYPE *);
  320 (* SET *);
  321 (* FORALL *);
  322 (* CONST *);
  323 (* INJEVENT *);
  324 (* OR *);
  325 (* CHANNEL *);
  326 (* LETFUN *);
  327 (* DEFINE *);
  328 (* EXPAND *);
  329 (* YIELD *);
  330 (* LEQ *);
  331 (* PROBA *);
  332 (* LETPROBA *);
  333 (* OPTIMIF *);
  334 (* ISCST *);
  335 (* COUNT *);
  337 (* LBRACE *);
  338 (* RBRACE *);
  339 (* PROOF *);
  340 (* IMPLEMENTATION *);
  341 (* EQUIVALENCE *);
  342 (* OTHERWISE *);
  343 (* FOREACH *);
  344 (* DO *);
  345 (* SECRET *);
  346 (* PUBLICVARS *);
  347 (* RANDOM *);
  348 (* LEFTARROW *);
  349 (* POWER *);
  350 (* LEMMA *);
  351 (* AXIOM *);
  352 (* RESTRICTION *);
  353 (* FOR *);
  354 (* TABLE *);
  355 (* INSERT *);
  356 (* GET *);
    0|]

let yytransl_block = [|
  270 (* IDENT *);
  271 (* TAG *);
  272 (* STRING *);
  273 (* PROJECTION *);
  274 (* UNDERSCORE *);
  275 (* INT *);
  336 (* FLOAT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\030\000\030\000\030\000\001\000\
\001\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\033\000\033\000\026\000\026\000\
\027\000\027\000\034\000\034\000\034\000\034\000\035\000\035\000\
\038\000\038\000\039\000\039\000\040\000\040\000\036\000\036\000\
\041\000\042\000\042\000\037\000\037\000\023\000\023\000\043\000\
\043\000\044\000\044\000\045\000\046\000\046\000\046\000\047\000\
\047\000\047\000\024\000\024\000\048\000\048\000\049\000\049\000\
\050\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\053\000\
\053\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\052\000\052\000\051\000\051\000\006\000\
\006\000\056\000\056\000\056\000\055\000\055\000\011\000\011\000\
\057\000\057\000\057\000\058\000\058\000\016\000\016\000\059\000\
\059\000\008\000\008\000\007\000\007\000\060\000\060\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\062\000\062\000\
\061\000\061\000\021\000\021\000\021\000\021\000\063\000\063\000\
\063\000\031\000\031\000\020\000\020\000\065\000\065\000\065\000\
\065\000\064\000\064\000\066\000\066\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\069\000\
\069\000\067\000\067\000\070\000\070\000\070\000\070\000\068\000\
\068\000\017\000\017\000\017\000\017\000\017\000\017\000\073\000\
\073\000\018\000\018\000\018\000\019\000\019\000\019\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\075\000\075\000\072\000\072\000\076\000\
\076\000\076\000\076\000\074\000\074\000\077\000\077\000\078\000\
\028\000\028\000\014\000\014\000\079\000\079\000\080\000\080\000\
\080\000\081\000\081\000\009\000\009\000\010\000\010\000\012\000\
\012\000\082\000\082\000\082\000\082\000\029\000\029\000\083\000\
\083\000\084\000\084\000\085\000\085\000\086\000\087\000\087\000\
\088\000\088\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\090\000\090\000\096\000\
\096\000\091\000\091\000\093\000\093\000\093\000\093\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
\097\000\097\000\094\000\094\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\098\000\098\000\
\095\000\095\000\099\000\099\000\100\000\100\000\089\000\089\000\
\101\000\101\000\003\000\003\000\003\000\004\000\004\000\000\000\
\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\005\000\010\000\012\000\005\000\007\000\005\000\004\000\007\000\
\008\000\005\000\007\000\006\000\009\000\006\000\009\000\006\000\
\006\000\006\000\008\000\006\000\008\000\006\000\007\000\005\000\
\006\000\004\000\004\000\006\000\004\000\005\000\006\000\007\000\
\005\000\004\000\006\000\004\000\004\000\007\000\003\000\009\000\
\007\000\007\000\005\000\000\000\001\000\001\000\001\000\004\000\
\005\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\001\000\003\000\
\001\000\003\000\005\000\005\000\004\000\004\000\001\000\001\000\
\001\000\003\000\003\000\003\000\001\000\003\000\003\000\000\000\
\003\000\001\000\003\000\003\000\000\000\000\000\003\000\000\000\
\001\000\001\000\003\000\001\000\002\000\003\000\003\000\000\000\
\002\000\003\000\000\000\003\000\000\000\001\000\001\000\003\000\
\003\000\003\000\002\000\003\000\003\000\003\000\003\000\003\000\
\004\000\004\000\006\000\006\000\008\000\006\000\009\000\005\000\
\006\000\001\000\002\000\003\000\004\000\004\000\006\000\004\000\
\004\000\005\000\005\000\004\000\005\000\001\000\001\000\000\000\
\001\000\003\000\004\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\002\000\000\000\001\000\003\000\003\000\
\000\000\001\000\003\000\005\000\003\000\001\000\003\000\001\000\
\000\000\002\000\003\000\005\000\003\000\003\000\001\000\003\000\
\000\000\001\000\001\000\001\000\000\000\003\000\001\000\001\000\
\004\000\004\000\006\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\004\000\003\000\003\000\003\000\003\000\001\000\
\001\000\000\000\007\000\005\000\003\000\001\000\000\000\005\000\
\009\000\004\000\002\000\003\000\001\000\002\000\004\000\004\000\
\004\000\000\000\002\000\000\000\002\000\005\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\007\000\007\000\
\003\000\003\000\004\000\003\000\003\000\006\000\005\000\005\000\
\005\000\003\000\003\000\005\000\002\000\006\000\005\000\003\000\
\001\000\001\000\000\000\006\000\004\000\005\000\003\000\001\000\
\000\000\006\000\005\000\005\000\001\000\005\000\005\000\002\000\
\000\000\002\000\003\000\000\000\002\000\003\000\000\000\004\000\
\006\000\001\000\001\000\003\000\003\000\003\000\005\000\002\000\
\002\000\006\000\005\000\003\000\001\000\001\000\000\000\006\000\
\004\000\005\000\003\000\001\000\000\000\002\000\000\000\004\000\
\003\000\001\000\001\000\000\000\003\000\000\000\006\000\005\000\
\001\000\004\000\003\000\003\000\002\000\004\000\002\000\002\000\
\004\000\003\000\001\000\003\000\003\000\004\000\003\000\003\000\
\000\000\001\000\003\000\003\000\003\000\003\000\001\000\000\000\
\000\000\007\000\002\000\003\000\002\000\005\000\002\000\005\000\
\006\000\001\000\001\000\006\000\004\000\005\000\008\000\008\000\
\004\000\007\000\004\000\005\000\008\000\006\000\009\000\003\000\
\007\000\004\000\003\000\003\000\006\000\002\000\000\000\002\000\
\000\000\002\000\000\000\001\000\003\000\001\000\003\000\001\000\
\003\000\004\000\006\000\008\000\001\000\003\000\003\000\002\000\
\003\000\001\000\001\000\000\000\004\000\006\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\003\000\003\000\007\000\005\000\005\000\007\000\
\005\000\007\000\006\000\007\000\010\000\003\000\002\000\000\000\
\002\000\000\000\003\000\000\000\003\000\001\000\001\000\000\000\
\003\000\003\000\000\000\001\000\003\000\003\000\001\000\002\000\
\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\000\046\000\047\000\000\000\160\001\000\000\000\000\
\161\001\000\000\162\001\000\000\000\000\163\001\000\000\000\000\
\000\000\000\000\000\000\000\000\176\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\193\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\242\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\058\000\059\000\
\060\000\050\000\051\000\052\000\057\000\054\000\055\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\001\000\000\000\000\000\000\000\000\000\000\000\000\075\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\154\001\157\001\158\001\000\000\
\000\000\190\000\000\000\000\000\184\000\000\000\000\000\000\000\
\000\000\183\000\182\000\000\000\170\000\171\000\000\000\000\000\
\172\000\168\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\001\000\000\
\000\000\000\000\235\000\000\000\000\000\000\000\165\000\000\000\
\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\217\000\000\000\000\000\211\000\166\000\204\000\
\000\000\197\000\000\000\000\000\000\000\026\000\000\000\007\000\
\000\000\029\000\159\000\036\000\000\000\000\000\033\001\000\000\
\037\001\000\000\000\000\000\000\000\000\055\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\001\
\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\
\000\000\000\000\005\001\000\000\000\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\089\000\
\000\000\000\000\000\000\000\000\000\000\102\000\000\000\000\000\
\000\000\062\000\000\000\000\000\000\000\000\000\000\000\034\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\069\001\000\000\000\000\071\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\104\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\191\000\177\000\178\000\187\000\000\000\000\000\000\000\152\000\
\000\000\006\000\000\000\000\000\049\001\004\000\046\001\000\000\
\010\000\000\000\000\000\000\000\240\000\000\000\000\000\000\000\
\248\000\000\000\000\000\000\000\000\000\208\000\209\000\000\000\
\227\000\000\000\207\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\001\000\000\000\000\
\000\000\000\000\000\000\054\001\000\000\017\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\001\000\000\000\000\006\001\
\000\000\030\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\151\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\093\000\087\000\
\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\
\000\000\000\000\134\000\000\000\000\000\000\000\135\000\000\000\
\033\000\064\000\000\000\072\000\071\000\000\000\070\000\069\000\
\000\000\068\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\101\001\000\000\062\001\103\001\000\000\
\000\000\000\000\000\000\000\000\000\000\115\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\091\001\000\000\092\001\000\000\000\000\000\000\000\000\000\000\
\049\000\000\000\000\000\000\000\202\000\043\000\000\000\000\000\
\174\000\155\000\000\000\157\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\000\000\236\000\164\000\000\000\000\000\
\214\000\000\000\000\000\231\000\232\000\000\000\233\000\000\000\
\000\000\025\000\000\000\028\000\030\001\035\000\000\000\000\000\
\014\001\000\000\000\000\000\000\013\001\000\000\020\001\012\001\
\000\000\252\000\251\000\000\000\255\000\254\000\000\000\020\000\
\000\000\022\000\016\000\017\000\018\000\000\000\000\000\000\000\
\000\000\142\001\000\000\000\000\000\000\123\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\122\001\121\001\000\000\
\000\000\000\000\000\000\000\000\097\000\000\000\091\000\094\000\
\095\000\031\000\105\000\104\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\123\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\
\067\000\000\000\162\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\001\000\000\077\001\000\000\000\000\
\000\000\000\000\105\001\000\000\000\000\111\001\000\000\000\000\
\110\001\000\000\090\001\000\000\000\000\000\000\000\000\000\000\
\083\001\000\000\000\000\000\000\179\000\000\000\000\000\040\001\
\000\000\000\000\000\000\230\000\000\000\000\000\213\000\000\000\
\000\000\000\000\023\000\000\000\008\000\038\000\000\000\000\000\
\000\000\000\000\028\001\008\001\000\000\000\000\000\001\250\000\
\000\000\000\000\005\000\000\000\000\000\149\001\000\000\117\001\
\000\000\000\000\000\000\000\000\000\000\000\000\130\001\000\000\
\000\000\000\000\000\000\041\000\098\000\000\000\106\000\124\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\000\000\000\000\112\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\163\000\000\000\000\000\000\000\000\000\070\001\061\001\
\060\001\000\000\059\001\072\001\000\000\078\001\000\000\113\001\
\106\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\000\000\200\000\000\000\000\000\156\000\039\001\009\000\
\000\000\000\000\000\000\223\000\224\000\195\000\000\000\000\000\
\000\000\015\001\000\000\000\000\019\000\021\000\000\000\000\000\
\000\000\000\000\000\000\135\001\000\000\000\000\147\001\000\000\
\000\000\000\000\000\000\000\000\151\000\000\000\000\000\000\000\
\000\000\000\000\000\000\125\000\132\000\000\000\000\000\000\000\
\128\000\129\000\126\000\000\000\114\000\138\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\113\000\000\000\000\000\084\000\000\000\000\000\000\000\
\079\000\076\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\093\001\073\001\086\001\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\246\000\000\000\009\001\000\000\
\000\000\000\000\015\000\118\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\130\000\000\000\000\000\
\000\000\120\000\133\000\000\000\137\000\000\000\000\000\131\000\
\147\000\139\000\000\000\081\000\083\000\000\000\075\000\076\000\
\078\000\063\001\000\000\000\000\000\000\000\000\000\000\082\001\
\089\001\000\000\000\000\000\000\000\000\000\000\002\000\244\000\
\000\000\000\000\000\000\138\001\136\001\000\000\000\000\127\000\
\000\000\148\000\118\000\116\000\000\000\115\000\000\000\000\000\
\080\001\079\001\066\001\000\000\085\001\000\000\000\000\000\000\
\000\000\000\000\044\001\026\001\000\000\000\000\000\000\000\000\
\074\000\108\001\000\000\087\001\201\000\003\000\000\000\024\001\
\000\000\000\000\117\000\000\000\141\001\119\000\042\001"

let yydgoto = "\006\000\
\038\000\039\000\043\000\046\000\152\000\149\000\047\001\048\001\
\249\003\059\000\088\000\057\000\020\001\062\001\050\002\075\000\
\101\000\220\000\223\000\076\000\098\001\162\000\235\000\237\000\
\245\002\249\000\120\000\063\001\094\000\040\000\127\000\250\000\
\251\000\121\000\102\002\009\003\007\003\031\004\135\003\136\003\
\131\003\132\003\167\001\168\001\169\001\170\001\079\002\173\001\
\174\001\175\001\246\002\017\004\022\004\254\002\052\001\053\001\
\108\002\078\000\058\000\049\001\133\000\134\000\026\001\192\000\
\079\000\169\002\163\000\248\001\164\000\249\001\126\001\127\001\
\194\002\066\003\128\001\067\003\014\002\090\000\095\000\153\000\
\075\004\212\000\195\001\114\002\115\002\021\001\035\004\196\001\
\051\002\137\002\150\003\124\002\163\001\125\002\247\003\071\004\
\126\002\188\003\219\002\052\002\044\000"

let yysindex = "\242\000\
\240\013\240\013\070\255\053\255\211\005\000\000\088\255\170\255\
\170\255\096\000\204\000\070\004\000\001\050\001\231\003\122\007\
\099\001\106\001\062\000\062\000\198\001\099\001\205\001\244\001\
\099\001\099\001\008\002\019\002\037\002\045\002\053\002\251\001\
\195\255\000\000\000\000\000\000\106\002\000\000\152\255\231\003\
\000\000\137\001\000\000\070\000\027\002\000\000\146\002\211\005\
\156\002\176\002\143\002\226\002\000\000\040\006\235\002\229\002\
\251\002\130\005\251\002\130\005\009\002\196\000\015\003\177\004\
\233\002\103\255\192\002\016\003\078\000\029\003\032\003\035\003\
\033\003\039\003\037\003\251\002\214\014\045\003\040\003\214\255\
\042\003\023\003\058\255\046\003\191\015\038\002\061\003\008\003\
\051\003\070\003\071\003\027\003\099\001\240\013\211\005\190\255\
\072\003\080\003\083\003\079\003\067\003\082\003\069\003\081\003\
\251\002\251\002\089\003\055\003\084\003\149\001\110\003\115\003\
\117\003\121\003\153\000\116\003\141\003\145\003\150\003\096\003\
\137\003\161\003\249\011\249\011\157\003\227\001\251\002\153\003\
\070\255\053\255\211\005\077\001\178\003\000\000\211\005\211\005\
\211\005\211\005\211\005\211\005\211\005\167\003\169\003\211\005\
\031\255\075\000\183\003\181\003\165\003\051\255\185\003\040\006\
\188\003\170\003\193\003\031\255\187\003\099\001\249\011\177\004\
\054\255\134\014\214\003\000\000\222\003\099\001\177\004\031\255\
\177\004\177\004\207\003\189\003\190\003\177\004\177\004\177\004\
\146\003\177\004\244\004\209\003\177\004\177\004\177\004\177\004\
\177\004\177\004\177\004\223\003\177\004\177\004\099\001\000\000\
\229\002\244\004\229\003\242\003\233\003\240\013\031\255\240\013\
\177\004\240\013\099\001\240\013\031\255\211\005\099\001\031\255\
\243\003\000\000\228\011\037\001\092\003\092\003\227\003\092\003\
\092\003\164\000\124\000\251\002\164\000\160\000\251\002\240\013\
\225\003\234\003\050\002\031\255\240\013\099\001\080\255\031\255\
\031\255\007\004\251\002\099\001\004\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\203\003\153\000\025\004\011\004\012\004\013\004\019\004\240\013\
\195\255\031\255\249\011\030\004\053\004\055\004\235\255\022\004\
\000\000\039\012\080\255\056\005\046\004\042\004\060\004\000\000\
\058\004\069\004\071\004\036\000\249\011\250\003\225\011\177\004\
\006\004\084\004\063\004\137\001\000\000\000\000\000\000\194\002\
\211\005\000\000\094\004\123\003\000\000\073\004\086\002\219\001\
\125\002\000\000\000\000\040\006\000\000\000\000\095\004\100\004\
\000\000\000\000\080\004\099\004\106\004\240\013\211\005\089\004\
\170\255\240\013\170\255\111\004\240\013\116\004\000\000\004\001\
\167\014\177\004\000\000\041\002\085\004\134\004\000\000\253\014\
\000\000\177\004\099\001\099\001\135\004\064\004\151\004\251\002\
\142\008\251\002\240\013\213\003\138\008\242\005\209\002\097\004\
\149\000\096\002\000\000\138\008\082\002\000\000\000\000\000\000\
\072\000\000\000\211\005\108\000\138\004\000\000\165\004\000\000\
\222\015\000\000\000\000\000\000\115\004\032\005\000\000\251\002\
\000\000\211\005\211\005\211\005\106\001\000\000\167\004\162\004\
\092\003\163\004\065\255\118\004\170\004\073\255\180\004\000\000\
\196\255\092\003\181\004\183\004\069\255\067\003\000\000\173\004\
\169\004\069\003\000\000\174\004\171\004\000\000\240\013\240\013\
\175\004\176\004\179\004\251\002\000\000\207\004\211\004\080\255\
\199\004\029\255\188\004\080\255\056\005\214\004\227\004\226\004\
\236\004\239\015\149\004\246\004\248\004\166\004\250\004\000\000\
\001\005\222\255\231\004\216\004\004\005\000\000\014\005\021\003\
\240\013\000\000\153\000\002\005\179\002\005\005\008\005\000\000\
\000\000\024\005\093\002\025\005\080\255\080\255\080\255\098\000\
\031\255\031\255\205\004\000\000\031\255\057\000\000\000\145\015\
\037\005\136\005\065\000\240\004\080\255\013\005\212\000\000\000\
\223\002\055\005\199\002\247\004\062\005\064\005\249\011\000\000\
\061\005\080\255\052\000\251\002\110\002\177\004\240\013\211\005\
\000\000\000\000\000\000\000\000\035\005\031\255\047\255\000\000\
\181\003\000\000\136\004\211\005\000\000\000\000\000\000\251\002\
\000\000\048\005\240\013\177\004\000\000\060\005\066\005\080\005\
\000\000\031\255\119\000\177\004\098\015\000\000\000\000\075\005\
\000\000\075\005\000\000\172\000\058\005\000\000\229\003\090\005\
\233\003\240\013\065\005\240\013\040\005\000\000\240\013\070\005\
\040\006\040\006\040\006\000\000\092\003\000\000\097\005\110\005\
\092\003\092\003\092\003\111\005\092\003\106\005\088\005\164\000\
\045\000\088\005\088\005\251\002\000\000\240\013\251\002\000\000\
\240\013\000\000\000\000\240\013\240\013\240\013\112\005\117\005\
\080\255\091\007\140\005\000\000\025\005\080\255\031\255\080\255\
\174\015\105\005\226\000\144\005\080\255\147\005\152\005\080\255\
\240\013\080\255\080\255\080\255\080\255\080\255\139\005\145\005\
\080\255\080\255\080\255\084\005\141\005\180\000\000\000\000\000\
\007\004\007\004\007\004\240\013\007\004\000\000\099\001\021\003\
\153\005\166\005\000\000\021\003\138\001\157\005\000\000\048\255\
\000\000\000\000\167\005\000\000\000\000\179\005\000\000\000\000\
\165\005\000\000\152\001\149\005\081\008\230\009\193\005\200\002\
\151\005\195\005\202\005\000\000\055\005\000\000\000\000\192\005\
\249\011\136\005\060\000\145\255\203\005\000\000\136\005\031\255\
\136\005\210\004\080\255\080\255\188\005\080\255\055\005\249\011\
\000\000\196\005\000\000\197\005\080\255\136\005\061\005\068\004\
\000\000\182\005\200\005\099\001\000\000\000\000\247\002\031\255\
\000\000\000\000\099\001\000\000\130\005\088\002\190\005\249\011\
\000\000\040\012\177\004\198\005\000\000\000\000\212\005\208\005\
\000\000\012\016\177\004\000\000\000\000\210\005\000\000\240\013\
\228\005\000\000\240\013\000\000\000\000\000\000\240\013\165\255\
\000\000\060\002\229\005\210\255\000\000\092\003\000\000\000\000\
\214\005\000\000\000\000\164\000\000\000\000\000\217\005\000\000\
\225\005\000\000\000\000\000\000\000\000\240\013\080\255\251\010\
\080\255\000\000\209\005\253\005\251\005\000\000\080\255\080\255\
\080\255\080\255\025\005\097\012\080\255\136\005\113\003\000\000\
\158\014\158\005\202\002\057\002\052\002\000\000\000\000\031\016\
\236\005\014\015\240\013\240\013\000\000\248\005\000\000\000\000\
\000\000\000\000\000\000\000\000\151\000\000\006\006\006\184\013\
\180\005\138\001\014\006\016\006\130\009\250\000\000\000\021\003\
\021\003\240\013\021\003\021\003\187\000\007\006\000\000\220\255\
\000\000\240\013\000\000\018\006\031\255\080\255\136\005\017\006\
\012\006\015\006\020\006\000\000\021\006\000\000\249\011\014\001\
\215\255\136\005\000\000\025\006\000\000\000\000\197\014\100\011\
\000\000\026\006\000\000\061\005\029\006\239\005\067\006\068\006\
\000\000\240\013\146\003\254\005\000\000\039\001\255\005\000\000\
\130\005\240\013\007\001\000\000\043\015\177\004\000\000\075\005\
\012\016\075\005\000\000\233\003\000\000\000\000\092\003\050\006\
\058\006\075\006\000\000\000\000\092\003\090\000\000\000\000\000\
\240\013\240\013\000\000\007\016\080\255\000\000\031\255\000\000\
\080\255\054\013\102\015\127\015\078\006\076\006\000\000\084\006\
\090\006\080\255\022\006\000\000\000\000\021\003\000\000\000\000\
\077\006\086\006\077\255\087\006\057\001\098\006\100\006\093\006\
\082\255\105\006\106\006\107\006\099\006\109\006\015\007\205\255\
\147\013\021\003\021\003\021\003\021\003\021\003\021\003\021\003\
\138\001\138\001\180\005\180\005\000\000\052\255\052\255\000\000\
\096\006\094\006\108\006\126\006\111\006\119\006\133\006\137\006\
\000\000\000\000\055\005\182\013\198\255\102\006\000\000\000\000\
\000\000\131\006\000\000\000\000\249\011\000\000\136\005\000\000\
\000\000\140\006\249\011\025\005\055\005\249\011\055\005\115\006\
\000\000\151\006\000\000\106\001\127\006\000\000\000\000\000\000\
\240\013\041\002\060\015\000\000\000\000\000\000\034\255\092\003\
\135\006\000\000\101\006\092\003\000\000\000\000\240\013\220\003\
\154\006\031\016\080\255\000\000\080\255\080\255\000\000\080\255\
\156\006\115\006\031\016\240\013\000\000\153\006\162\006\099\001\
\165\006\166\006\167\006\000\000\000\000\165\006\099\001\165\006\
\000\000\000\000\000\000\168\006\000\000\000\000\113\001\218\255\
\167\255\147\255\147\255\147\255\147\255\147\255\186\000\128\006\
\185\255\000\000\160\006\007\006\000\000\161\006\161\006\220\255\
\000\000\000\000\120\006\251\002\164\006\061\005\044\255\249\011\
\014\001\055\005\000\000\000\000\000\000\080\255\251\002\169\006\
\251\002\130\005\240\013\000\000\000\000\041\002\000\000\216\255\
\092\003\101\006\000\000\000\000\080\255\031\016\054\013\054\013\
\031\016\080\255\251\002\000\000\175\006\000\000\174\006\021\003\
\179\006\000\000\000\000\182\006\000\000\183\006\184\006\000\000\
\000\000\000\000\021\003\000\000\000\000\187\006\000\000\000\000\
\000\000\000\000\055\005\055\005\199\006\171\006\014\001\000\000\
\000\000\031\016\201\006\207\006\185\006\129\006\000\000\000\000\
\060\002\128\000\031\016\000\000\000\000\031\016\210\006\000\000\
\209\006\000\000\000\000\000\000\165\006\000\000\147\255\161\006\
\000\000\000\000\000\000\031\255\000\000\249\011\202\006\142\006\
\240\013\106\001\000\000\000\000\060\002\080\255\165\006\222\006\
\000\000\000\000\061\005\000\000\000\000\000\000\130\005\000\000\
\054\013\223\006\000\000\129\006\000\000\000\000\000\000"

let yyrindex = "\000\000\
\207\255\229\007\230\007\000\000\000\000\000\000\000\000\005\006\
\005\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\008\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\231\007\232\007\000\000\000\000\228\006\
\133\011\000\000\180\011\000\000\000\000\234\007\000\000\000\000\
\204\006\000\000\204\006\000\000\204\006\000\000\000\000\231\006\
\000\000\086\013\142\012\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\204\006\048\001\199\000\224\255\023\003\
\000\000\000\000\000\000\000\000\000\000\132\003\000\000\000\000\
\000\000\173\002\200\001\000\000\000\000\011\000\000\000\075\001\
\000\000\000\000\000\000\000\000\019\001\000\000\129\001\000\000\
\204\006\204\006\000\000\000\000\000\000\000\000\000\000\000\000\
\166\001\214\006\000\000\000\000\000\000\000\000\000\000\000\000\
\208\006\000\000\000\000\000\000\000\000\109\001\204\006\000\000\
\230\007\000\000\000\000\237\006\000\000\000\000\228\006\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\238\006\000\000\000\000\000\000\000\000\115\002\000\000\143\000\
\177\001\000\000\180\001\238\006\000\000\239\006\000\000\000\000\
\243\008\240\006\000\000\000\000\175\012\000\000\231\006\000\000\
\000\000\000\000\000\000\000\000\000\000\231\006\000\000\231\006\
\048\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\238\006\011\000\
\000\000\011\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\090\001\000\000\241\006\000\000\000\000\241\006\
\241\006\000\000\000\000\204\006\000\000\000\000\204\006\011\000\
\000\000\000\000\000\000\000\000\011\000\239\006\000\000\238\006\
\238\006\242\006\204\006\243\006\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\106\255\178\006\000\000\000\000\000\000\000\000\011\000\
\000\000\238\006\000\000\000\000\000\000\000\000\093\007\104\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\222\001\000\000\026\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\159\000\232\001\
\120\002\000\000\000\000\252\003\000\000\000\000\000\000\244\006\
\000\000\000\000\186\002\000\000\000\007\011\000\000\000\000\000\
\005\006\011\000\005\006\000\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\007\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\091\001\
\000\000\204\006\011\000\219\007\007\000\124\255\085\006\235\012\
\255\012\051\013\000\000\083\000\059\013\000\000\000\000\000\000\
\091\000\000\000\000\000\023\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\002\000\000\000\000\204\006\
\000\000\000\000\000\000\000\000\006\008\000\000\000\000\000\000\
\241\006\000\000\251\000\204\002\000\000\010\007\000\000\000\000\
\000\000\000\000\000\000\000\000\075\001\019\001\000\000\000\000\
\000\000\129\001\000\000\000\000\000\000\000\000\011\000\011\000\
\000\000\000\000\000\000\204\006\000\000\000\000\000\000\011\007\
\000\000\214\002\058\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\224\001\000\000\000\000\
\014\007\239\002\000\000\000\000\000\000\000\000\016\007\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\232\006\000\000\000\000\011\007\000\000\
\000\000\000\000\000\000\000\000\000\000\093\007\000\000\000\000\
\000\000\020\007\006\001\078\002\000\000\000\000\000\000\000\000\
\210\008\005\009\005\009\000\000\000\000\000\000\000\000\000\000\
\164\009\000\000\000\000\204\006\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\204\006\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\012\000\000\000\000\000\000\000\000\072\012\
\000\000\072\012\000\000\072\012\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\011\000\000\000\000\000\011\000\000\000\
\117\001\192\001\231\001\000\000\000\000\000\000\000\000\070\002\
\241\006\000\000\000\000\000\000\000\000\000\000\124\001\000\000\
\000\000\124\001\124\001\204\006\000\000\011\000\204\006\000\000\
\011\000\000\000\000\000\011\000\011\000\011\000\000\000\000\000\
\000\000\021\007\000\000\000\000\232\006\011\007\000\000\000\000\
\000\000\000\000\000\000\206\002\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\153\007\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\002\000\000\000\000\005\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\007\000\000\005\009\000\000\000\000\000\000\
\000\000\000\000\190\000\025\007\000\000\000\000\020\007\000\000\
\000\000\168\002\000\000\000\000\000\000\011\007\005\009\000\000\
\000\000\000\000\000\000\000\000\011\007\020\007\207\009\005\009\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\001\000\000\000\000\000\000\000\000\000\000\011\000\
\252\006\000\000\011\000\000\000\000\000\000\000\011\000\000\000\
\000\000\024\007\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\007\026\007\000\000\011\007\020\007\030\005\000\000\
\101\005\215\004\130\003\202\003\044\004\000\000\000\000\085\002\
\143\004\000\000\211\006\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\007\000\000\000\000\000\000\
\174\010\000\000\063\255\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\062\009\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\011\
\000\000\000\000\000\000\000\000\077\000\000\000\107\009\008\010\
\000\000\000\000\000\000\051\010\000\000\000\000\000\000\000\000\
\000\000\011\000\030\007\000\000\000\000\204\006\000\000\000\000\
\000\000\011\000\000\000\000\000\033\007\000\000\000\000\072\012\
\066\001\072\012\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\007\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\223\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\007\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\014\072\014\000\000\105\014\138\014\000\000\
\000\000\000\000\034\007\000\000\000\000\000\000\037\007\000\000\
\000\000\000\000\005\009\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\108\010\000\000\186\007\005\009\000\000\005\009\237\007\
\000\000\000\000\000\000\147\006\000\000\000\000\000\000\000\000\
\011\000\000\000\039\007\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\196\004\000\000\000\000\000\000\011\000\000\000\
\000\000\172\005\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\072\002\232\005\011\000\000\000\000\000\000\000\000\000\
\042\007\000\000\000\000\000\000\000\000\042\007\043\007\042\007\
\000\000\000\000\000\000\000\000\000\000\000\000\063\255\000\000\
\000\000\193\000\142\001\153\001\156\001\157\001\000\000\114\000\
\250\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\008\083\008\000\000\151\010\000\000\000\000\
\097\011\005\009\000\000\000\000\000\000\000\000\107\009\000\000\
\204\006\000\000\011\000\000\000\000\000\000\000\000\000\054\007\
\000\000\154\005\000\000\000\000\000\000\047\006\048\007\048\007\
\118\006\000\000\038\007\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\241\002\000\000\000\000\
\000\000\000\000\005\009\005\009\000\000\107\001\097\011\000\000\
\000\000\140\008\208\010\000\000\000\000\236\001\000\000\000\000\
\000\000\056\007\189\006\000\000\000\000\247\006\000\000\000\000\
\000\000\000\000\000\000\000\000\042\007\000\000\068\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\253\010\000\000\
\011\000\147\006\000\000\000\000\000\000\000\000\042\007\000\000\
\000\000\000\000\054\011\000\000\000\000\000\000\000\000\000\000\
\048\007\000\000\000\000\253\001\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\254\255\176\007\191\007\054\002\199\255\137\255\091\255\
\000\000\012\007\252\255\027\007\144\255\098\007\060\255\019\000\
\242\255\203\006\200\006\100\002\248\255\120\000\000\000\000\000\
\230\254\163\006\086\007\004\000\227\006\000\000\247\254\000\000\
\099\007\000\000\000\000\000\000\000\000\052\252\000\000\119\004\
\000\000\120\004\000\000\028\006\011\006\197\001\000\000\000\000\
\010\006\000\000\025\253\122\252\000\000\031\253\125\006\000\000\
\055\254\000\000\014\000\132\006\238\007\027\255\000\000\086\255\
\000\000\042\254\046\002\000\000\044\007\142\252\056\255\049\255\
\007\002\000\000\089\006\110\253\000\000\000\000\116\252\197\255\
\027\004\000\000\000\000\099\005\000\000\000\000\000\000\113\005\
\122\254\098\254\103\252\018\255\161\255\145\253\184\004\000\000\
\102\005\096\252\000\000\174\005\003\008"

let yytablesize = 4457
let yytable = "\041\000\
\155\000\154\000\071\001\157\000\082\000\103\000\080\001\135\002\
\131\001\132\001\044\000\023\001\092\000\129\001\220\001\028\003\
\110\003\105\000\180\000\089\000\108\000\109\000\060\000\250\003\
\112\003\153\001\032\004\022\001\022\001\207\001\040\003\081\000\
\054\002\084\000\162\001\216\001\060\001\100\000\102\000\109\001\
\255\003\172\002\112\001\173\002\045\001\175\002\064\001\225\000\
\226\000\000\003\038\004\145\002\139\002\000\003\135\000\253\003\
\111\002\167\000\125\000\225\001\154\002\199\000\148\001\022\001\
\122\000\122\000\045\000\122\000\025\002\027\001\200\001\020\004\
\213\000\023\004\147\000\029\002\193\001\001\003\002\003\103\001\
\151\001\001\003\200\003\152\001\042\000\207\003\122\000\040\004\
\200\000\153\001\201\003\210\000\122\000\154\001\030\002\208\003\
\209\000\008\001\155\001\046\001\156\001\055\000\052\004\053\004\
\133\002\166\000\167\000\211\002\003\003\004\003\089\003\157\001\
\164\001\165\001\061\000\081\004\158\001\159\001\197\003\055\002\
\122\000\122\000\122\000\122\000\122\000\008\002\229\000\155\002\
\229\000\229\000\229\000\077\000\229\000\030\002\085\000\229\000\
\122\000\110\003\186\001\048\004\005\003\069\004\055\001\216\003\
\005\003\169\000\187\001\026\003\000\003\096\002\168\000\224\003\
\225\003\199\001\229\000\122\000\026\002\229\000\185\000\126\000\
\214\000\069\001\137\001\022\001\217\001\141\001\219\001\063\003\
\000\003\023\002\022\001\026\004\208\001\084\004\059\002\212\002\
\001\003\171\001\160\001\161\001\123\000\022\001\080\004\022\001\
\093\004\033\002\094\001\061\000\101\001\087\004\069\001\229\000\
\166\000\213\000\169\000\102\001\001\003\104\001\107\001\106\001\
\090\004\108\001\236\003\134\001\032\002\133\002\138\001\003\003\
\004\003\214\003\111\001\095\001\149\002\229\000\022\003\057\002\
\195\000\151\003\069\003\116\000\229\000\142\001\025\004\082\002\
\049\004\030\002\149\001\003\003\004\003\205\000\121\003\172\001\
\035\003\133\003\056\000\044\000\124\000\168\000\191\001\005\003\
\192\001\041\003\001\000\002\000\003\000\004\000\005\000\134\003\
\109\002\110\002\121\003\083\002\122\003\184\001\205\000\034\003\
\030\002\117\000\133\002\005\003\118\000\168\000\039\003\121\003\
\130\002\234\000\196\000\234\000\234\000\234\000\030\002\234\000\
\122\003\086\003\234\000\133\002\030\002\144\002\003\002\065\001\
\005\002\214\000\193\001\116\002\117\002\122\003\206\001\119\002\
\072\001\073\001\153\001\044\000\119\000\234\000\078\001\044\000\
\058\004\081\001\077\000\215\001\084\001\085\001\086\001\087\001\
\088\001\089\001\090\001\234\001\092\001\093\001\016\002\238\001\
\196\002\077\000\241\001\215\001\191\001\208\001\192\001\127\002\
\105\001\249\002\253\002\166\000\127\002\194\001\254\001\255\001\
\060\000\187\002\007\002\096\000\184\002\166\000\129\000\165\000\
\006\002\188\002\189\002\085\003\166\002\228\000\088\003\228\000\
\228\000\228\000\047\002\228\000\044\000\097\000\228\000\044\000\
\234\000\172\003\098\000\173\003\101\001\180\003\143\002\234\000\
\193\001\030\002\208\001\193\001\208\002\061\000\009\002\112\002\
\128\002\228\000\172\000\214\002\228\000\165\000\145\000\022\001\
\220\002\198\000\168\000\223\002\196\000\225\002\226\002\227\002\
\228\002\229\002\120\002\167\002\232\002\233\002\234\002\145\000\
\077\004\101\001\160\000\025\003\042\002\043\002\135\001\126\000\
\173\000\213\002\030\003\194\001\041\001\113\002\030\002\041\001\
\000\003\094\003\238\000\239\000\240\000\241\000\076\004\099\000\
\196\000\185\000\146\002\185\000\185\000\185\000\242\000\185\000\
\243\000\168\002\185\000\244\000\228\000\041\001\097\002\058\002\
\245\000\133\001\139\001\228\000\001\003\145\000\159\002\246\000\
\167\002\136\001\088\004\000\003\030\002\185\000\031\003\032\003\
\100\001\253\001\100\001\097\000\100\001\140\000\237\002\158\000\
\098\000\185\000\185\000\185\000\185\000\128\003\185\000\167\000\
\027\004\188\000\242\003\003\003\004\003\100\001\140\000\001\003\
\247\000\062\000\029\003\159\000\150\002\140\001\174\002\111\003\
\122\000\122\000\185\000\122\000\041\001\123\003\124\003\189\000\
\126\003\127\003\199\002\132\002\234\003\201\002\140\000\167\000\
\161\002\238\002\046\003\005\003\185\000\070\003\003\003\004\003\
\129\003\217\002\100\001\248\000\122\000\010\001\243\003\010\001\
\245\003\010\001\107\001\010\001\140\000\099\000\010\001\178\002\
\024\003\180\002\076\003\215\001\182\002\080\000\215\001\120\003\
\133\002\195\002\082\003\083\003\084\003\215\001\005\003\036\003\
\004\001\022\001\208\001\122\000\122\000\100\001\133\002\208\001\
\141\003\208\001\243\001\200\002\149\003\169\003\202\002\121\003\
\022\001\203\002\204\002\205\002\148\000\117\001\208\001\051\003\
\239\000\004\001\239\000\239\000\239\000\210\000\239\000\010\001\
\210\000\239\000\054\000\122\000\248\002\122\003\224\002\083\000\
\022\001\164\003\100\001\118\001\238\000\087\000\238\000\238\000\
\238\000\140\003\238\000\203\003\239\000\238\000\210\000\033\001\
\253\000\242\002\172\001\041\004\131\001\126\000\111\003\217\003\
\218\003\219\003\220\003\221\003\222\003\223\003\253\002\253\002\
\238\000\048\003\051\001\153\000\139\000\132\000\012\003\139\003\
\253\000\253\000\102\001\162\002\102\001\107\001\102\001\107\001\
\091\000\107\001\199\000\170\002\113\003\199\000\175\003\186\000\
\051\001\153\000\140\000\141\000\179\003\050\001\208\001\102\001\
\162\003\001\001\107\001\203\003\065\004\066\004\007\001\239\000\
\184\003\142\000\143\000\199\000\186\003\250\002\239\000\044\003\
\144\000\089\002\143\000\050\001\211\000\195\003\047\003\251\002\
\230\000\001\001\001\001\238\000\091\002\144\000\011\003\007\001\
\142\000\141\000\238\000\143\000\102\001\091\000\148\003\107\001\
\239\003\185\003\093\000\086\000\231\000\059\003\144\000\208\001\
\061\003\142\000\141\000\128\000\062\003\072\003\048\001\022\001\
\032\001\047\001\208\001\143\000\132\000\036\001\037\001\038\001\
\039\001\040\001\041\001\102\001\086\000\044\001\144\000\092\002\
\052\001\142\000\141\000\075\003\160\000\160\000\160\000\048\001\
\160\000\143\000\047\001\104\000\070\001\119\001\093\002\252\002\
\094\002\095\002\106\000\077\001\144\000\079\001\052\001\142\000\
\141\000\096\000\096\000\203\000\096\000\154\003\160\000\000\004\
\091\003\092\003\189\000\002\004\189\000\189\000\189\000\053\001\
\189\000\045\001\139\000\189\000\165\003\167\003\006\004\160\000\
\007\004\008\004\181\000\009\004\203\000\096\000\146\000\125\003\
\063\004\107\000\043\001\110\001\182\000\053\001\189\000\137\003\
\140\000\141\000\045\001\085\000\156\000\080\000\148\000\146\000\
\183\000\184\000\189\000\189\000\189\000\110\000\082\001\142\000\
\143\000\160\000\053\003\043\001\185\000\186\000\187\000\188\000\
\111\000\085\000\057\003\080\000\238\003\096\001\189\000\161\003\
\203\000\135\000\241\003\189\000\190\000\244\003\031\001\168\003\
\031\001\042\004\112\000\174\003\031\001\022\001\246\001\208\001\
\050\004\120\001\113\000\022\001\247\001\189\000\022\001\145\001\
\051\004\146\001\114\000\025\001\147\001\054\004\181\003\182\003\
\016\001\064\003\016\001\115\000\016\001\146\001\016\001\065\003\
\109\001\016\001\109\001\146\001\109\001\130\000\132\000\131\001\
\131\001\131\001\131\001\131\001\131\001\131\001\131\001\131\001\
\131\001\106\002\131\001\049\003\215\001\109\001\131\001\131\001\
\131\001\131\001\131\001\131\001\235\001\068\002\069\002\139\000\
\071\002\072\002\068\002\131\001\131\001\071\002\072\002\122\000\
\180\000\131\001\186\000\180\000\186\000\186\000\186\000\039\004\
\186\000\124\001\016\001\186\000\141\000\140\000\141\000\131\001\
\131\001\089\004\180\000\185\000\186\000\187\000\188\000\186\000\
\022\001\180\000\142\000\143\000\142\000\143\000\186\000\131\000\
\132\000\185\000\186\000\144\000\188\000\131\001\082\004\135\000\
\180\000\180\000\186\000\186\000\186\000\186\000\252\003\017\002\
\018\002\019\002\112\001\131\001\112\001\171\003\112\001\180\000\
\180\000\034\001\036\004\136\000\003\004\034\001\180\000\131\001\
\131\001\142\000\143\000\186\000\154\000\043\004\046\004\045\004\
\154\000\012\004\100\002\015\004\224\001\101\002\147\002\148\002\
\180\000\125\001\021\004\137\000\138\002\186\000\011\001\136\002\
\011\001\055\004\011\001\148\001\011\001\083\004\148\001\011\001\
\119\001\139\000\119\001\119\001\119\001\119\001\119\001\119\001\
\119\001\119\001\134\002\119\001\107\002\138\000\022\001\119\001\
\119\001\119\001\119\001\119\001\119\001\119\001\145\000\140\000\
\141\000\092\000\146\000\092\000\119\001\119\001\165\000\073\000\
\047\004\073\000\119\001\188\000\170\000\045\003\142\000\143\000\
\148\000\017\003\018\003\119\001\119\001\144\000\071\002\072\002\
\119\001\119\001\185\000\186\000\187\000\188\000\139\000\119\001\
\119\001\119\001\119\001\119\001\160\000\151\002\240\002\241\002\
\088\002\119\001\190\000\092\004\089\002\171\000\119\001\119\001\
\174\000\158\002\090\002\175\000\140\000\141\000\176\000\091\002\
\197\002\198\002\178\000\127\001\119\001\179\000\177\000\193\000\
\194\000\100\001\197\000\142\000\143\000\198\000\201\000\205\000\
\119\001\119\001\144\000\206\000\120\001\120\001\120\001\120\001\
\120\001\120\001\120\001\120\001\120\001\120\001\086\004\120\001\
\207\000\203\000\208\000\120\001\120\001\120\001\120\001\120\001\
\120\001\120\001\092\002\216\000\139\000\215\000\217\000\218\000\
\120\001\120\001\221\000\204\000\119\001\120\001\120\001\121\001\
\219\000\093\002\222\000\094\002\095\002\122\001\228\000\120\001\
\120\001\123\001\140\000\141\000\120\001\120\001\124\001\224\000\
\227\000\232\000\229\000\120\001\120\001\120\001\233\000\120\001\
\234\000\142\000\143\000\125\001\236\000\120\001\000\001\227\001\
\144\000\252\000\120\001\120\001\124\001\124\001\124\001\124\001\
\124\001\124\001\124\001\124\001\124\001\124\001\126\001\124\001\
\120\001\001\001\139\000\124\001\124\001\124\001\124\001\124\001\
\124\001\124\001\253\000\180\000\120\001\120\001\254\000\067\002\
\124\001\124\001\180\000\255\000\002\001\024\001\124\001\028\001\
\140\000\141\000\068\002\069\002\070\002\071\002\072\002\124\001\
\124\001\180\000\180\000\160\000\124\001\124\001\034\001\142\000\
\143\000\042\001\074\002\043\001\124\001\124\001\144\000\050\001\
\180\000\180\000\051\001\054\001\057\001\124\001\056\001\180\000\
\058\001\059\001\124\001\124\001\125\001\125\001\125\001\125\001\
\125\001\125\001\125\001\125\001\125\001\125\001\129\001\125\001\
\124\001\061\001\067\001\125\001\125\001\125\001\125\001\125\001\
\125\001\125\001\004\004\068\001\124\001\124\001\074\001\063\000\
\125\001\125\001\064\000\191\000\075\001\076\001\125\001\083\001\
\065\000\091\001\097\001\064\002\066\000\099\001\100\001\125\001\
\125\001\067\000\130\001\113\001\125\001\125\001\188\000\143\001\
\188\000\188\000\188\000\184\000\188\000\125\001\068\000\188\000\
\144\001\066\002\067\002\070\000\071\000\125\001\185\000\186\000\
\187\000\188\000\125\001\125\001\166\001\068\002\069\002\070\002\
\071\002\072\002\188\000\176\001\177\001\128\001\190\000\073\002\
\125\001\179\001\180\001\181\001\182\001\074\002\188\000\188\000\
\188\000\072\000\183\001\188\001\125\001\125\001\127\001\127\001\
\127\001\127\001\127\001\127\001\127\001\127\001\127\001\127\001\
\189\001\127\001\190\001\209\001\210\001\127\001\127\001\127\001\
\127\001\127\001\127\001\127\001\001\002\197\001\063\000\212\001\
\074\000\064\000\127\001\127\001\136\002\228\001\211\001\065\000\
\127\001\188\000\213\001\066\000\214\001\218\001\221\001\181\000\
\067\000\127\001\127\001\064\002\222\001\223\001\127\001\127\001\
\139\000\182\000\226\001\229\001\132\001\068\000\230\001\231\001\
\069\000\232\001\070\000\071\000\233\001\183\000\184\000\127\001\
\236\001\066\002\067\002\240\001\127\001\127\001\140\000\141\000\
\242\001\185\000\186\000\187\000\188\000\068\002\069\002\070\002\
\071\002\072\002\127\001\189\000\250\001\142\000\143\000\073\002\
\072\000\190\000\251\001\000\002\144\000\074\002\127\001\127\001\
\157\002\126\001\126\001\126\001\126\001\126\001\126\001\126\001\
\126\001\126\001\126\001\002\002\126\001\188\000\073\000\139\000\
\126\001\126\001\126\001\126\001\126\001\126\001\126\001\074\000\
\010\002\011\002\013\002\134\001\021\002\126\001\126\001\022\002\
\024\002\063\000\027\002\126\001\064\000\140\000\141\000\028\002\
\031\002\034\002\065\000\035\002\126\001\126\001\161\000\037\002\
\040\002\126\001\126\001\067\000\142\000\143\000\019\001\038\002\
\019\001\041\002\019\001\144\000\019\001\044\002\045\002\019\001\
\068\000\046\002\126\001\048\002\053\002\070\000\071\000\126\001\
\049\002\129\001\129\001\129\001\129\001\129\001\129\001\129\001\
\129\001\129\001\129\001\060\002\129\001\126\001\061\002\137\001\
\129\001\129\001\129\001\129\001\129\001\129\001\129\001\062\002\
\075\002\126\001\126\001\072\000\063\000\129\001\129\001\064\000\
\056\002\063\002\076\002\129\001\077\002\065\000\080\002\066\002\
\067\002\161\000\078\002\081\002\129\001\084\002\067\000\085\002\
\086\002\129\001\129\001\068\002\069\002\070\002\071\002\072\002\
\087\002\099\002\074\000\068\000\103\002\073\002\069\000\104\002\
\070\000\071\000\129\001\074\002\105\002\118\002\107\002\129\001\
\128\001\128\001\128\001\128\001\128\001\128\001\128\001\128\001\
\128\001\128\001\122\002\128\001\129\002\129\001\143\001\128\001\
\128\001\128\001\128\001\128\001\128\001\131\002\072\000\139\000\
\201\001\129\001\129\001\202\001\128\001\128\001\015\002\136\002\
\140\002\141\002\128\001\142\002\215\001\203\001\121\000\160\002\
\121\000\008\001\204\001\128\001\073\000\140\000\141\000\205\001\
\128\001\128\001\152\002\163\002\164\002\074\000\165\002\167\002\
\176\002\121\000\121\000\121\000\142\000\143\000\177\002\179\002\
\181\002\128\001\121\000\144\000\183\002\185\002\128\001\132\001\
\132\001\132\001\132\001\132\001\132\001\132\001\132\001\132\001\
\132\001\121\000\132\001\186\002\128\001\139\001\132\001\132\001\
\132\001\132\001\132\001\132\001\192\002\121\000\121\000\121\000\
\128\001\128\001\047\000\132\001\132\001\048\000\190\002\121\000\
\201\001\132\001\193\002\202\001\207\002\121\000\206\002\150\000\
\210\002\216\002\050\000\218\002\051\000\123\002\221\002\132\001\
\132\001\008\001\204\001\222\002\018\001\230\002\018\001\205\001\
\018\001\151\000\018\001\231\002\235\002\018\001\247\002\052\000\
\132\001\248\002\255\002\236\002\006\003\132\001\134\001\134\001\
\134\001\134\001\134\001\134\001\134\001\134\001\134\001\134\001\
\008\003\134\001\053\000\132\001\133\001\134\001\134\001\134\001\
\134\001\134\001\134\001\010\003\013\003\016\003\019\003\132\001\
\132\001\020\003\134\001\134\001\021\003\023\003\033\003\027\003\
\134\001\037\003\038\003\047\000\042\003\043\003\048\000\068\002\
\069\002\070\002\071\002\072\002\050\003\054\003\134\001\134\001\
\049\000\055\003\056\003\050\000\058\003\051\000\060\003\074\002\
\071\003\068\003\137\001\137\001\137\001\137\001\137\001\137\001\
\137\001\137\001\137\001\137\001\134\001\137\001\140\001\073\003\
\052\000\137\001\137\001\137\001\137\001\137\001\137\001\074\003\
\079\003\080\003\134\001\081\003\095\003\169\000\137\001\137\001\
\169\000\181\000\093\003\053\000\137\001\096\003\134\001\134\001\
\005\003\113\003\169\000\114\003\130\003\169\000\142\003\169\000\
\138\003\144\003\137\001\137\001\145\003\153\003\156\003\183\000\
\184\000\146\003\112\002\157\003\169\000\068\002\069\002\070\002\
\071\002\072\002\169\000\185\000\186\000\187\000\188\000\144\001\
\137\001\143\001\143\001\143\001\143\001\143\001\143\001\143\001\
\143\001\143\001\143\001\190\000\143\001\169\000\137\001\139\000\
\143\001\143\001\143\001\143\001\143\001\143\001\158\003\159\003\
\160\003\176\003\137\001\137\001\177\003\143\001\143\001\163\003\
\166\003\178\003\191\003\143\001\192\003\140\000\141\000\226\000\
\193\003\226\000\226\000\226\000\065\001\226\000\194\003\198\003\
\226\000\143\001\143\001\199\003\142\000\143\000\204\003\196\003\
\205\003\202\003\206\003\144\000\226\000\209\003\210\003\211\003\
\212\003\213\003\226\003\226\000\228\003\227\003\226\000\143\001\
\139\001\139\001\139\001\139\001\139\001\139\001\139\001\139\001\
\139\001\139\001\226\000\139\001\229\003\143\001\230\003\139\001\
\139\001\139\001\139\001\139\001\139\001\232\003\231\003\233\003\
\237\003\143\001\143\001\038\001\139\001\139\001\038\001\240\003\
\226\000\113\002\139\001\246\003\248\003\251\003\001\004\013\004\
\038\001\030\002\005\004\038\001\010\004\038\001\014\004\016\004\
\139\001\139\001\018\004\019\004\024\004\121\003\226\000\028\004\
\030\004\037\004\038\001\056\004\057\004\226\000\044\004\059\004\
\038\001\161\000\060\004\061\004\062\004\064\004\139\001\133\001\
\133\001\133\001\133\001\133\001\133\001\133\001\133\001\133\001\
\133\001\034\004\133\001\038\001\139\001\067\004\133\001\133\001\
\133\001\133\001\133\001\133\001\070\004\072\004\074\004\073\004\
\139\001\139\001\068\004\133\001\133\001\078\004\079\004\085\004\
\149\003\133\001\091\004\094\004\044\000\155\001\156\001\159\001\
\194\000\164\001\153\000\243\000\146\001\099\000\065\000\133\001\
\133\001\192\000\173\000\036\001\241\000\023\001\088\000\101\000\
\175\000\140\001\140\001\140\001\140\001\140\001\140\001\140\001\
\140\001\140\001\140\001\063\000\140\001\133\001\158\000\249\000\
\140\001\140\001\140\001\140\001\140\001\140\001\021\001\152\001\
\000\003\094\003\090\000\133\001\103\000\140\001\140\001\161\000\
\116\001\150\001\196\000\140\001\058\001\114\001\029\001\133\001\
\133\001\150\000\161\000\210\000\044\000\064\001\115\003\247\000\
\082\000\140\001\140\001\077\000\001\003\245\000\149\000\136\000\
\030\001\153\000\144\001\144\001\144\001\144\001\144\001\144\001\
\144\001\144\001\144\001\144\001\027\001\144\001\025\001\140\001\
\031\001\144\001\144\001\144\001\144\001\144\001\239\001\150\001\
\116\003\117\003\118\003\003\003\004\003\140\001\144\001\144\001\
\036\002\039\002\153\000\237\001\144\001\098\002\185\001\020\002\
\119\003\140\001\140\001\029\004\178\001\209\002\033\004\243\002\
\244\002\065\001\144\001\144\001\065\001\156\002\065\001\065\001\
\065\001\153\002\065\001\005\003\239\002\245\001\065\001\065\001\
\065\001\065\001\064\002\065\001\035\001\191\002\095\004\147\003\
\144\001\011\004\047\000\065\001\065\001\048\000\078\003\152\003\
\143\003\065\001\029\001\000\000\000\000\000\000\144\001\086\000\
\066\002\067\002\050\000\145\001\051\000\000\000\000\000\065\001\
\065\001\000\000\144\001\144\001\068\002\069\002\070\002\071\002\
\072\002\000\000\122\000\122\000\000\000\122\000\073\002\052\000\
\000\000\000\000\000\000\000\000\074\002\065\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\001\122\000\122\000\
\122\000\000\000\053\000\065\001\000\000\000\000\122\000\122\000\
\100\001\000\000\000\000\000\000\000\000\161\000\161\000\065\001\
\065\001\161\000\161\000\161\000\161\000\161\000\122\000\161\000\
\000\000\000\000\000\000\161\000\161\000\161\000\161\000\000\000\
\161\000\161\000\122\000\122\000\122\000\122\000\122\000\000\000\
\161\000\161\000\000\000\000\000\122\000\225\000\161\000\225\000\
\225\000\225\000\122\000\225\000\000\000\000\000\225\000\000\000\
\000\000\000\000\000\000\000\000\161\000\161\000\000\000\000\000\
\146\001\146\001\146\001\000\000\146\001\122\000\146\001\146\001\
\146\001\225\000\146\001\000\000\225\000\000\000\146\001\146\001\
\146\001\146\001\161\000\146\001\095\001\000\000\038\001\000\000\
\225\000\038\001\000\000\146\001\146\001\000\000\000\000\000\000\
\161\000\146\001\000\000\038\001\000\000\000\000\038\001\000\000\
\038\001\000\000\000\000\000\000\161\000\161\000\225\000\146\001\
\146\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\001\064\001\038\001\000\000\064\001\064\001\064\001\
\064\001\064\001\000\000\064\001\225\000\146\001\000\000\064\001\
\064\001\064\001\064\001\225\000\064\001\065\001\038\001\000\000\
\000\000\000\000\000\000\146\001\064\001\064\001\000\000\000\000\
\000\000\000\000\064\001\000\000\000\000\000\000\000\000\146\001\
\146\001\000\000\000\000\014\003\000\000\000\000\153\000\153\000\
\064\001\064\001\153\000\153\000\153\000\153\000\153\000\000\000\
\153\000\000\000\000\000\000\000\153\000\153\000\153\000\153\000\
\064\002\153\000\153\000\000\000\000\000\000\000\064\001\000\000\
\000\000\153\000\153\000\000\000\000\000\000\000\000\000\153\000\
\000\000\000\000\000\000\000\000\064\001\000\000\066\002\067\002\
\000\000\000\000\000\000\000\000\000\000\153\000\153\000\000\000\
\064\001\064\001\068\002\069\002\070\002\071\002\072\002\145\001\
\145\001\145\001\004\002\145\001\073\002\145\001\145\001\145\001\
\000\000\145\001\074\002\153\000\000\000\145\001\145\001\145\001\
\145\001\181\000\145\001\067\001\000\000\181\000\000\000\000\000\
\000\000\153\000\145\001\145\001\000\000\000\000\000\000\182\000\
\145\001\000\000\000\000\000\000\000\000\153\000\153\000\183\000\
\184\000\000\000\000\000\183\000\184\000\000\000\145\001\145\001\
\000\000\000\000\000\000\185\000\186\000\187\000\188\000\185\000\
\186\000\187\000\188\000\000\000\000\000\189\000\088\001\000\000\
\000\000\189\000\000\000\190\000\145\001\000\000\161\000\190\000\
\000\000\161\000\161\000\161\000\161\000\161\000\000\000\161\000\
\000\000\000\000\145\001\161\000\161\000\161\000\161\000\000\000\
\161\000\000\000\000\000\000\000\000\000\000\000\145\001\145\001\
\161\000\161\000\000\000\000\000\000\000\215\000\161\000\215\000\
\215\000\215\000\000\000\215\000\000\000\000\000\215\000\000\000\
\000\000\000\000\000\000\000\000\161\000\161\000\000\000\081\001\
\095\001\095\001\215\000\000\000\095\001\000\000\095\001\095\001\
\095\001\215\000\095\001\000\000\215\000\000\000\095\001\095\001\
\095\001\095\001\161\000\095\001\000\000\000\000\000\000\000\000\
\215\000\215\000\000\000\095\001\095\001\000\000\000\000\000\000\
\161\000\095\001\000\000\000\000\215\000\215\000\215\000\215\000\
\000\000\000\000\094\001\000\000\161\000\161\000\215\000\095\001\
\095\001\000\000\000\000\000\000\215\000\000\000\000\000\000\000\
\000\000\065\001\065\001\000\000\000\000\065\001\000\000\065\001\
\065\001\065\001\000\000\065\001\215\000\095\001\000\000\065\001\
\065\001\065\001\065\001\215\000\065\001\000\000\000\000\000\000\
\000\000\000\000\000\000\095\001\065\001\065\001\000\000\000\000\
\000\000\000\000\065\001\000\000\000\000\000\000\000\000\095\001\
\095\001\000\000\000\000\084\001\000\000\000\000\153\000\153\000\
\065\001\065\001\153\000\000\000\153\000\153\000\153\000\000\000\
\153\000\000\000\000\000\000\000\153\000\153\000\153\000\153\000\
\000\000\153\000\000\000\000\003\000\000\000\000\065\001\000\000\
\000\000\153\000\153\000\000\000\000\000\000\000\000\000\153\000\
\000\000\000\000\000\000\000\000\065\001\000\000\098\001\000\000\
\000\000\115\003\000\000\000\000\000\000\153\000\153\000\001\003\
\065\001\065\001\000\000\000\000\000\000\000\000\000\000\067\001\
\067\001\000\000\000\000\000\000\000\000\067\001\067\001\067\001\
\000\000\067\001\000\000\153\000\000\000\067\001\067\001\067\001\
\067\001\000\000\067\001\116\003\117\003\118\003\003\003\004\003\
\000\000\153\000\067\001\067\001\000\000\000\000\000\000\000\000\
\067\001\000\000\000\000\119\003\000\000\153\000\153\000\097\001\
\000\000\000\000\088\001\088\001\000\000\000\000\067\001\067\001\
\088\001\088\001\088\001\000\000\088\001\000\000\005\003\000\000\
\088\001\088\001\088\001\088\001\000\000\088\001\000\000\000\000\
\015\003\000\000\000\000\000\000\067\001\088\001\088\001\000\000\
\000\000\000\000\000\000\088\001\000\000\000\000\000\000\000\000\
\000\000\000\000\067\001\000\000\099\001\064\002\000\000\000\000\
\000\000\088\001\088\001\000\000\000\000\000\000\067\001\067\001\
\000\000\000\000\000\000\081\001\081\001\000\000\000\000\081\001\
\000\000\081\001\081\001\066\002\067\002\081\001\000\000\088\001\
\000\000\081\001\081\001\081\001\081\001\000\000\081\001\068\002\
\069\002\070\002\071\002\072\002\000\000\088\001\081\001\081\001\
\000\000\073\002\000\000\000\000\081\001\000\000\000\000\074\002\
\000\000\088\001\088\001\000\000\000\000\096\001\094\001\094\001\
\000\000\000\000\081\001\081\001\094\001\094\001\094\001\000\000\
\094\001\000\000\000\000\000\000\094\001\094\001\094\001\094\001\
\000\000\094\001\000\000\000\000\000\000\000\000\000\000\000\000\
\081\001\094\001\094\001\000\000\000\000\000\000\000\000\094\001\
\000\000\000\000\000\000\000\000\000\000\000\000\081\001\000\000\
\099\001\000\000\000\000\000\000\000\000\094\001\094\001\000\000\
\000\000\000\000\081\001\081\001\000\000\000\000\000\000\084\001\
\084\001\000\000\000\000\084\001\000\000\084\001\084\001\000\000\
\000\000\084\001\000\000\094\001\000\000\084\001\084\001\084\001\
\084\001\000\000\084\001\000\000\180\000\000\000\000\000\000\000\
\000\000\094\001\084\001\084\001\000\000\000\000\000\000\000\000\
\084\001\000\000\000\000\000\000\000\000\094\001\094\001\000\000\
\000\000\000\000\098\001\098\001\000\000\000\000\084\001\084\001\
\098\001\098\001\098\001\000\000\098\001\000\000\000\000\000\000\
\098\001\098\001\098\001\098\001\000\000\098\001\000\000\107\000\
\107\000\000\000\107\000\181\000\084\001\098\001\098\001\000\000\
\000\000\000\000\000\000\098\001\000\000\000\000\000\000\000\000\
\000\000\000\000\084\001\107\000\107\000\107\000\000\000\000\000\
\000\000\098\001\098\001\107\000\107\000\000\000\084\001\084\001\
\000\000\000\000\000\000\097\001\097\001\000\000\000\000\097\001\
\000\000\097\001\097\001\107\000\000\000\097\001\000\000\098\001\
\000\000\097\001\097\001\097\001\097\001\000\000\097\001\107\000\
\107\000\107\000\107\000\107\000\000\000\098\001\097\001\097\001\
\000\000\107\000\000\000\000\000\097\001\000\000\000\000\107\000\
\000\000\098\001\098\001\000\000\000\000\077\003\000\000\000\000\
\099\001\099\001\097\001\097\001\099\001\000\000\099\001\099\001\
\099\001\000\000\099\001\000\000\000\000\000\000\099\001\099\001\
\099\001\099\001\064\002\000\000\000\000\000\000\000\000\000\000\
\097\001\000\000\000\000\099\001\099\001\000\000\000\000\000\000\
\000\000\099\001\000\000\000\000\000\000\000\000\097\001\000\000\
\066\002\067\002\000\000\000\000\000\000\000\000\000\000\099\001\
\099\001\000\000\097\001\097\001\068\002\069\002\070\002\071\002\
\072\002\096\001\096\001\000\000\000\000\000\000\073\002\096\001\
\096\001\096\001\000\000\096\001\074\002\099\001\000\000\096\001\
\096\001\096\001\096\001\000\000\096\001\000\000\000\000\000\000\
\000\000\000\000\000\000\099\001\096\001\096\001\000\000\000\000\
\000\000\000\000\096\001\000\000\000\000\000\000\000\000\099\001\
\099\001\000\000\000\000\000\000\099\001\099\001\000\000\000\000\
\096\001\096\001\099\001\099\001\099\001\000\000\099\001\155\003\
\000\000\000\000\099\001\099\001\099\001\099\001\000\000\000\000\
\000\000\000\000\000\000\064\002\000\000\000\000\096\001\099\001\
\099\001\000\000\000\000\000\000\000\000\099\001\000\000\180\000\
\000\000\180\000\180\000\180\000\096\001\180\000\000\000\000\000\
\180\000\066\002\067\002\099\001\099\001\000\000\000\000\000\000\
\096\001\096\001\000\000\000\000\180\000\068\002\069\002\070\002\
\071\002\072\002\000\000\180\000\000\000\000\000\000\000\073\002\
\000\000\099\001\000\000\000\000\000\000\074\002\000\000\180\000\
\180\000\180\000\180\000\180\000\000\000\000\000\181\000\099\001\
\181\000\181\000\181\000\000\000\181\000\000\000\000\000\181\000\
\000\000\180\000\180\000\099\001\099\001\000\000\000\000\000\000\
\180\000\000\000\000\000\181\000\000\000\000\000\000\000\000\000\
\000\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\180\000\000\000\000\000\000\000\181\000\181\000\
\181\000\181\000\181\000\000\000\003\001\000\000\000\000\000\000\
\215\001\000\000\004\001\005\001\006\001\000\000\007\001\000\000\
\000\000\181\000\008\001\009\001\010\001\011\001\000\000\181\000\
\000\000\000\000\000\000\139\000\003\001\000\000\000\000\000\000\
\012\001\000\000\004\001\005\001\006\001\013\001\007\001\000\000\
\000\000\181\000\008\001\009\001\010\001\011\001\114\001\115\001\
\116\001\140\000\141\000\014\001\015\001\000\000\000\000\000\000\
\012\001\000\000\000\000\000\000\000\000\013\001\000\000\000\000\
\142\000\143\000\000\000\000\000\000\000\000\000\000\000\144\000\
\000\000\016\001\003\001\014\001\015\001\000\000\052\003\000\000\
\004\001\005\001\006\001\000\000\198\001\000\000\000\000\017\001\
\008\001\009\001\010\001\011\001\000\000\000\000\000\000\181\000\
\000\000\016\001\000\000\018\001\019\001\000\000\012\001\000\000\
\000\000\182\000\212\000\013\001\212\000\212\000\212\000\017\001\
\212\000\000\000\000\000\212\000\000\000\183\000\184\000\000\000\
\000\000\014\001\015\001\018\001\019\001\000\000\000\000\212\000\
\000\000\185\000\186\000\187\000\188\000\087\003\212\000\000\000\
\000\000\212\000\000\000\189\000\000\000\000\000\000\000\016\001\
\000\000\190\000\000\000\000\000\000\000\212\000\212\000\000\000\
\064\002\000\000\000\000\000\000\000\000\017\001\000\000\000\000\
\000\000\212\000\212\000\212\000\212\000\000\000\000\000\000\000\
\000\000\018\001\019\001\212\000\000\000\000\000\066\002\067\002\
\216\000\212\000\216\000\216\000\216\000\000\000\216\000\000\000\
\000\000\216\000\068\002\069\002\070\002\071\002\072\002\000\000\
\000\000\212\000\000\000\000\000\073\002\216\000\000\000\000\000\
\212\000\000\000\074\002\000\000\216\000\000\000\000\000\216\000\
\000\000\237\000\000\000\237\000\000\000\237\000\000\000\237\000\
\000\000\000\000\237\000\216\000\216\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\237\000\216\000\
\216\000\216\000\000\000\000\000\000\000\237\000\000\000\000\000\
\237\000\216\000\000\000\000\000\000\000\000\000\000\000\216\000\
\000\000\000\000\000\000\000\000\237\000\237\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216\000\
\237\000\237\000\237\000\237\000\000\000\221\000\216\000\221\000\
\221\000\221\000\237\000\221\000\000\000\000\000\221\000\000\000\
\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\222\000\221\000\222\000\222\000\222\000\000\000\222\000\
\237\000\221\000\222\000\000\000\221\000\000\000\000\000\237\000\
\000\000\000\000\000\000\000\000\000\000\000\000\222\000\000\000\
\221\000\221\000\000\000\000\000\000\000\222\000\000\000\000\000\
\222\000\000\000\000\000\000\000\000\000\221\000\221\000\000\000\
\000\000\000\000\000\000\000\000\222\000\222\000\221\000\000\000\
\000\000\000\000\000\000\000\000\221\000\220\000\000\000\220\000\
\220\000\220\000\222\000\220\000\000\000\219\000\220\000\219\000\
\219\000\219\000\222\000\219\000\221\000\000\000\219\000\000\000\
\222\000\000\000\220\000\221\000\187\003\064\002\000\000\000\000\
\000\000\220\000\219\000\000\000\220\000\000\000\000\000\000\000\
\222\000\219\000\000\000\215\000\219\000\000\000\215\000\222\000\
\220\000\220\000\000\000\066\002\067\002\000\000\000\000\000\000\
\219\000\219\000\000\000\000\000\000\000\215\000\000\000\068\002\
\069\002\070\002\071\002\072\002\215\000\000\000\220\000\215\000\
\000\000\073\002\000\000\000\000\220\000\000\000\219\000\074\002\
\000\000\000\000\000\000\215\000\215\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\220\000\000\000\000\000\215\000\
\215\000\215\000\215\000\220\000\219\000\000\000\250\002\000\000\
\097\003\215\000\089\002\219\000\098\003\099\003\100\003\215\000\
\215\003\000\000\000\000\000\000\000\000\091\002\102\003\103\003\
\000\000\000\000\104\003\000\000\000\000\000\000\000\000\215\000\
\000\000\000\000\105\003\000\000\000\000\000\000\215\000\000\000\
\000\000\000\000\235\003\088\002\000\000\097\003\000\000\089\002\
\106\003\098\003\099\003\100\003\000\000\101\003\000\000\000\000\
\000\000\000\000\091\002\102\003\103\003\064\002\000\000\104\003\
\092\002\000\000\000\000\000\000\000\000\000\000\107\003\105\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\093\002\
\252\002\094\002\095\002\066\002\067\002\106\003\000\000\000\000\
\000\000\108\003\000\000\000\000\000\000\109\003\000\000\068\002\
\069\002\070\002\071\002\072\002\000\000\092\002\000\000\000\000\
\000\000\073\002\000\000\107\003\000\000\000\000\000\000\074\002\
\000\000\000\000\000\000\000\000\093\002\000\000\094\002\095\002\
\007\000\008\000\009\000\010\000\000\000\000\000\108\003\011\000\
\012\000\000\000\109\003\013\000\014\000\015\000\016\000\017\000\
\000\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\020\000\000\000\000\000\000\000\021\000\022\000\000\000\
\110\000\110\000\000\000\110\000\000\000\000\000\023\000\024\000\
\000\000\025\000\000\000\000\000\026\000\027\000\028\000\029\000\
\000\000\000\000\030\000\031\000\110\000\110\000\110\000\000\000\
\000\000\000\000\032\000\033\000\110\000\110\000\000\000\000\000\
\000\000\111\000\111\000\000\000\111\000\034\000\035\000\036\000\
\000\000\037\000\000\000\000\000\110\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\111\000\111\000\111\000\
\110\000\110\000\110\000\110\000\110\000\111\000\111\000\000\000\
\000\000\000\000\110\000\108\000\000\000\108\000\000\000\000\000\
\110\000\000\000\000\000\000\000\000\000\111\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\108\000\108\000\
\108\000\111\000\111\000\111\000\111\000\111\000\000\000\108\000\
\066\001\000\000\000\000\111\000\109\000\000\000\109\000\000\000\
\000\000\111\000\000\000\000\000\000\000\000\000\108\000\000\000\
\000\000\000\000\000\000\000\000\000\000\181\000\000\000\109\000\
\109\000\109\000\108\000\108\000\108\000\108\000\108\000\182\000\
\109\000\244\001\000\000\000\000\108\000\000\000\000\000\000\000\
\000\000\000\000\108\000\183\000\184\000\064\002\000\000\109\000\
\000\000\000\000\000\000\000\000\000\000\000\000\181\000\185\000\
\186\000\187\000\188\000\109\000\109\000\109\000\109\000\109\000\
\182\000\189\000\148\000\066\002\067\002\109\000\000\000\190\000\
\000\000\000\000\000\000\109\000\183\000\184\000\000\000\068\002\
\069\002\070\002\071\002\072\002\064\002\000\000\000\000\000\000\
\185\000\186\000\187\000\188\000\000\000\000\000\000\000\074\002\
\000\000\000\000\189\000\000\000\000\000\181\000\000\000\000\000\
\190\000\000\000\066\002\067\002\000\000\000\000\000\000\182\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\002\069\002\
\070\002\071\002\072\002\183\000\184\000\252\001\000\000\000\000\
\073\002\000\000\000\000\000\000\000\000\000\000\074\002\185\000\
\186\000\187\000\188\000\000\000\181\000\000\000\090\003\000\000\
\000\000\189\000\000\000\000\000\000\000\000\000\182\000\190\000\
\000\000\000\000\000\000\000\000\000\000\064\002\000\000\000\000\
\000\000\000\000\183\000\184\000\000\000\000\000\000\000\191\000\
\000\000\000\000\000\000\170\003\000\000\000\000\185\000\186\000\
\187\000\188\000\000\000\066\002\067\002\000\000\000\000\000\000\
\189\000\000\000\181\000\000\000\254\003\000\000\190\000\068\002\
\069\002\070\002\071\002\072\002\182\000\000\000\000\000\000\000\
\000\000\073\002\000\000\181\000\000\000\000\000\000\000\074\002\
\183\000\184\000\000\000\000\000\000\000\182\000\000\000\000\000\
\000\000\000\000\000\000\000\000\185\000\186\000\187\000\188\000\
\000\000\183\000\184\000\000\000\000\000\171\002\189\000\000\000\
\000\000\189\003\000\000\000\000\190\000\185\000\186\000\187\000\
\188\000\181\000\000\000\000\000\000\000\064\002\000\000\189\000\
\000\000\000\000\000\000\182\000\000\000\190\000\000\000\000\000\
\000\000\000\000\190\003\000\000\000\000\000\000\000\000\183\000\
\184\000\000\000\000\000\066\002\067\002\000\000\064\002\000\000\
\000\000\000\000\000\000\185\000\186\000\187\000\188\000\068\002\
\069\002\070\002\071\002\072\002\000\000\189\000\121\002\000\000\
\064\002\073\002\000\000\190\000\066\002\067\002\000\000\074\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\002\069\002\070\002\071\002\072\002\000\000\066\002\067\002\
\000\000\000\000\073\002\215\002\000\000\064\002\000\000\000\000\
\074\002\000\000\068\002\069\002\070\002\071\002\072\002\000\000\
\000\000\000\000\000\000\000\000\073\002\000\000\181\000\000\000\
\000\000\000\000\074\002\066\002\067\002\202\000\000\000\000\000\
\182\000\000\000\000\000\000\000\000\000\000\000\000\000\068\002\
\069\002\070\002\071\002\072\002\183\000\184\000\000\000\000\000\
\000\000\073\002\000\000\000\000\000\000\181\000\000\000\074\002\
\185\000\186\000\187\000\188\000\012\002\000\000\000\000\182\000\
\000\000\000\000\189\000\000\000\000\000\000\000\064\002\000\000\
\190\000\000\000\000\000\183\000\184\000\065\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\185\000\
\186\000\187\000\188\000\000\000\066\002\067\002\064\002\000\000\
\000\000\189\000\000\000\181\000\000\000\183\003\000\000\190\000\
\068\002\069\002\070\002\071\002\072\002\182\000\000\000\000\000\
\000\000\000\000\073\002\000\000\066\002\067\002\064\002\000\000\
\074\002\183\000\184\000\000\000\000\000\000\000\000\000\000\000\
\068\002\069\002\070\002\071\002\072\002\185\000\186\000\187\000\
\188\000\000\000\073\002\000\000\066\002\067\002\000\000\189\000\
\074\002\000\000\000\000\000\000\000\000\190\000\000\000\000\000\
\068\002\069\002\070\002\071\002\072\002\000\000\000\000\000\000\
\000\000\000\000\073\002\000\000\000\000\000\000\000\000\000\000\
\074\002"

let yycheck = "\002\000\
\060\000\059\000\168\000\061\000\013\000\020\000\177\000\209\001\
\216\000\217\000\000\000\124\000\017\000\214\000\024\001\127\002\
\248\002\022\000\076\000\016\000\025\000\026\000\009\000\164\003\
\250\002\000\000\231\003\123\000\124\000\012\001\142\002\013\000\
\004\001\015\000\231\000\000\000\156\000\019\000\020\000\205\000\
\007\001\000\002\208\000\002\002\014\001\004\002\159\000\105\000\
\106\000\002\001\007\001\000\000\211\001\002\001\004\001\170\003\
\191\001\004\001\040\000\033\001\014\001\004\001\228\000\159\000\
\002\001\003\001\014\001\005\001\004\001\127\000\011\001\206\003\
\004\001\208\003\056\000\003\001\048\001\030\001\031\001\199\000\
\001\001\030\001\006\001\004\001\015\001\004\001\024\001\241\003\
\031\001\010\001\014\001\094\000\030\001\014\001\061\001\014\001\
\093\000\018\001\019\001\069\001\021\001\014\001\007\004\008\004\
\061\001\003\001\004\001\053\002\061\001\062\001\222\002\032\001\
\232\000\233\000\009\001\064\004\037\001\038\001\094\003\091\001\
\058\001\059\001\060\001\061\001\062\001\099\001\003\001\081\001\
\005\001\006\001\007\001\012\000\009\001\061\001\015\000\012\001\
\074\001\113\003\002\001\254\003\093\001\039\004\092\001\113\003\
\093\001\092\001\003\001\003\001\002\001\176\001\048\001\121\003\
\122\003\010\001\031\001\093\001\092\001\034\001\000\000\040\000\
\092\001\166\000\220\000\003\001\021\001\223\000\023\001\003\001\
\002\001\121\001\010\001\005\001\012\001\071\004\157\001\054\002\
\030\001\235\000\099\001\100\001\029\001\021\001\061\004\023\001\
\089\004\130\001\191\000\082\001\197\000\074\004\195\000\068\001\
\003\001\004\001\092\001\198\000\030\001\200\000\203\000\202\000\
\079\004\204\000\005\001\218\000\009\001\061\001\221\000\061\001\
\062\001\005\001\207\000\193\000\222\001\090\001\117\002\156\001\
\003\001\003\001\009\001\025\001\097\001\224\000\005\001\002\001\
\009\001\061\001\229\000\061\001\062\001\006\001\046\001\236\000\
\135\002\014\001\065\001\029\001\085\001\048\001\004\001\093\001\
\006\001\144\002\001\000\002\000\003\000\004\000\005\000\028\001\
\189\001\190\001\046\001\030\001\068\001\000\001\031\001\134\002\
\061\001\063\001\061\001\093\001\066\001\048\001\141\002\046\001\
\205\001\003\001\053\001\005\001\006\001\007\001\061\001\009\001\
\068\001\219\002\012\001\061\001\061\001\218\001\080\001\160\000\
\082\001\092\001\048\001\193\001\194\001\068\001\012\001\197\001\
\169\000\170\000\009\001\085\001\098\001\031\001\175\000\029\001\
\016\004\178\000\179\000\008\001\181\000\182\000\183\000\184\000\
\185\000\186\000\187\000\054\001\189\000\190\000\112\001\058\001\
\012\001\194\000\061\001\008\001\004\001\157\001\006\001\004\001\
\201\000\092\002\093\002\003\001\004\001\091\001\075\001\076\001\
\059\001\025\002\003\001\014\001\021\002\003\001\009\001\003\001\
\083\001\026\002\027\002\218\002\250\001\003\001\221\002\005\001\
\006\001\007\001\148\001\009\001\082\001\032\001\012\001\085\001\
\090\001\056\003\037\001\058\003\024\001\012\001\215\001\097\001\
\048\001\061\001\202\001\048\001\049\002\014\001\003\001\014\001\
\048\001\031\001\037\001\056\002\034\001\041\001\005\001\215\001\
\061\002\031\001\048\001\064\002\053\001\066\002\067\002\068\002\
\069\002\070\002\074\001\013\001\073\002\074\002\075\002\022\001\
\009\001\061\001\048\001\122\002\143\001\144\001\019\001\024\001\
\067\001\055\002\129\002\091\001\006\001\052\001\061\001\009\001\
\002\001\003\001\002\001\003\001\004\001\005\001\049\004\098\001\
\053\001\003\001\220\001\005\001\006\001\007\001\014\001\009\001\
\016\001\051\001\012\001\019\001\090\001\031\001\177\001\157\001\
\024\001\014\001\019\001\097\001\030\001\068\001\240\001\031\001\
\013\001\062\001\077\004\002\001\061\001\031\001\131\002\132\002\
\003\001\074\001\005\001\032\001\007\001\005\001\019\001\004\001\
\037\001\043\001\044\001\045\001\046\001\019\001\058\001\009\001\
\023\001\061\001\156\003\061\001\062\001\024\001\022\001\030\001\
\064\001\014\001\128\002\024\001\223\001\062\001\051\001\250\002\
\002\001\003\001\068\001\005\001\086\001\000\003\001\003\000\000\
\003\003\004\003\036\002\024\001\139\003\039\002\046\001\041\001\
\243\001\062\001\152\002\093\001\086\001\190\002\061\001\062\001\
\062\001\024\001\061\001\099\001\030\001\003\001\157\003\005\001\
\159\003\007\001\007\002\009\001\068\001\098\001\012\001\010\002\
\121\002\012\002\207\002\008\001\015\002\014\001\008\001\022\001\
\061\001\032\002\215\002\216\002\217\002\008\001\093\001\136\002\
\006\001\121\002\122\002\061\001\062\001\024\001\061\001\127\002\
\015\003\129\002\031\001\038\002\023\001\031\001\041\002\046\001\
\136\002\044\002\045\002\046\002\006\001\009\001\142\002\160\002\
\003\001\031\001\005\001\006\001\007\001\006\001\009\001\061\001\
\009\001\012\001\005\000\093\001\004\001\068\001\065\002\014\001\
\160\002\027\001\061\001\031\001\003\001\016\000\005\001\006\001\
\007\001\014\003\009\001\019\001\031\001\012\001\031\001\003\001\
\006\001\084\002\087\002\242\003\000\000\222\001\113\003\114\003\
\115\003\116\003\117\003\118\003\119\003\120\003\121\003\122\003\
\031\001\157\002\009\001\009\001\024\001\048\000\107\002\013\003\
\030\001\031\001\003\001\244\001\005\001\003\001\007\001\005\001\
\014\001\007\001\006\001\252\001\004\001\009\001\063\003\000\000\
\031\001\031\001\046\001\047\001\069\003\009\001\222\002\024\001\
\043\003\006\001\024\001\019\001\035\004\036\004\006\001\090\001\
\077\003\061\001\062\001\031\001\081\003\004\001\097\001\148\002\
\068\001\008\001\005\001\031\001\095\000\090\003\155\002\014\001\
\004\001\030\001\031\001\090\001\019\001\005\001\007\001\031\001\
\005\001\005\001\097\001\022\001\061\001\014\001\023\003\061\001\
\151\003\079\003\065\001\006\001\024\001\176\002\022\001\015\003\
\179\002\022\001\022\001\043\001\183\002\196\002\006\001\023\003\
\131\000\006\001\026\003\046\001\135\000\136\000\137\000\138\000\
\139\000\140\000\141\000\092\001\031\001\144\000\046\001\062\001\
\009\001\046\001\046\001\206\002\005\001\006\001\007\001\031\001\
\009\001\068\001\031\001\014\001\167\000\000\000\077\001\078\001\
\079\001\080\001\014\001\174\000\068\001\176\000\031\001\068\001\
\068\001\002\001\003\001\006\001\005\001\031\003\031\001\176\003\
\235\002\236\002\003\001\180\003\005\001\006\001\007\001\009\001\
\009\001\006\001\024\001\012\001\046\003\049\003\187\003\048\001\
\189\003\190\003\024\001\192\003\031\001\030\001\005\001\002\003\
\027\004\014\001\006\001\206\000\034\001\031\001\031\001\010\003\
\046\001\047\001\031\001\009\001\004\001\009\001\006\001\022\001\
\046\001\047\001\043\001\044\001\045\001\014\001\179\000\061\001\
\062\001\082\001\163\002\031\001\058\001\059\001\060\001\061\001\
\014\001\031\001\171\002\031\001\149\003\194\000\068\001\042\003\
\003\001\004\001\155\003\068\001\074\001\158\003\003\001\050\003\
\005\001\246\003\014\001\060\003\009\001\149\003\014\001\151\003\
\001\004\000\000\014\001\155\003\020\001\086\001\158\003\014\001\
\005\004\016\001\014\001\097\001\019\001\010\004\073\003\074\003\
\003\001\014\001\005\001\081\001\007\001\006\001\009\001\020\001\
\003\001\012\001\005\001\012\001\007\001\059\001\033\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\005\001\014\001\012\001\008\001\024\001\018\001\019\001\
\020\001\021\001\022\001\023\001\055\001\058\001\059\001\024\001\
\061\001\062\001\058\001\031\001\032\001\061\001\062\001\014\001\
\006\001\037\001\003\001\009\001\005\001\006\001\007\001\240\003\
\009\001\000\000\061\001\012\001\047\001\046\001\047\001\051\001\
\052\001\078\004\024\001\058\001\059\001\060\001\061\001\024\001\
\240\003\031\001\061\001\062\001\061\001\062\001\031\001\006\001\
\099\001\058\001\059\001\068\001\061\001\073\001\068\004\004\001\
\046\001\047\001\043\001\044\001\045\001\046\001\169\003\114\001\
\115\001\116\001\003\001\087\001\005\001\054\003\007\001\061\001\
\062\001\005\001\236\003\004\001\183\003\009\001\068\001\099\001\
\100\001\061\001\062\001\068\001\003\001\247\003\250\003\249\003\
\007\001\196\003\016\001\200\003\003\001\019\001\089\001\090\001\
\086\001\000\000\207\003\061\001\006\001\086\001\003\001\009\001\
\005\001\011\004\007\001\006\001\009\001\070\004\009\001\012\001\
\003\001\024\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\004\001\014\001\006\001\004\001\070\004\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\004\001\046\001\
\047\001\003\001\014\001\005\001\031\001\032\001\014\001\007\001\
\251\003\009\001\037\001\000\000\061\001\007\001\061\001\062\001\
\006\001\058\001\059\001\046\001\047\001\068\001\061\001\062\001\
\051\001\052\001\058\001\059\001\060\001\061\001\024\001\058\001\
\059\001\060\001\061\001\062\001\006\001\224\001\082\002\083\002\
\004\001\068\001\074\001\087\004\008\001\014\001\073\001\074\001\
\004\001\236\001\014\001\004\001\046\001\047\001\004\001\019\001\
\034\002\035\002\004\001\000\000\087\001\009\001\014\001\003\001\
\009\001\092\001\009\001\061\001\062\001\031\001\009\001\048\001\
\099\001\100\001\068\001\009\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\073\004\014\001\
\003\001\003\001\048\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\062\001\004\001\024\001\014\001\004\001\009\001\
\031\001\032\001\009\001\031\001\001\001\002\001\037\001\004\001\
\030\001\077\001\030\001\079\001\080\001\010\001\048\001\046\001\
\047\001\014\001\046\001\047\001\051\001\052\001\019\001\031\001\
\024\001\004\001\031\001\058\001\059\001\060\001\004\001\062\001\
\004\001\061\001\062\001\032\001\004\001\068\001\031\001\005\001\
\068\001\014\001\073\001\074\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\000\000\014\001\
\087\001\009\001\024\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\014\001\024\001\099\001\100\001\014\001\047\001\
\031\001\032\001\031\001\014\001\004\001\009\001\037\001\015\001\
\046\001\047\001\058\001\059\001\060\001\061\001\062\001\046\001\
\047\001\046\001\047\001\048\001\051\001\052\001\005\001\061\001\
\062\001\019\001\074\001\019\001\059\001\060\001\068\001\009\001\
\061\001\062\001\014\001\031\001\009\001\068\001\014\001\068\001\
\031\001\009\001\073\001\074\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\000\000\014\001\
\087\001\031\001\005\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\007\001\006\001\099\001\100\001\024\001\001\001\
\031\001\032\001\004\001\090\001\048\001\048\001\037\001\031\001\
\010\001\019\001\014\001\024\001\014\001\004\001\014\001\046\001\
\047\001\019\001\024\001\009\001\051\001\052\001\003\001\031\001\
\005\001\006\001\007\001\047\001\009\001\060\001\032\001\012\001\
\031\001\046\001\047\001\037\001\038\001\068\001\058\001\059\001\
\060\001\061\001\073\001\074\001\014\001\058\001\059\001\060\001\
\061\001\062\001\031\001\024\001\082\001\000\000\074\001\068\001\
\087\001\009\001\024\001\024\001\024\001\074\001\043\001\044\001\
\045\001\067\001\024\001\014\001\099\001\100\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\004\001\014\001\004\001\014\001\019\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\005\001\048\001\001\001\014\001\
\098\001\004\001\031\001\032\001\009\001\005\001\019\001\010\001\
\037\001\086\001\014\001\014\001\014\001\092\001\081\001\024\001\
\019\001\046\001\047\001\024\001\009\001\031\001\051\001\052\001\
\024\001\034\001\005\001\005\001\000\000\032\001\003\001\024\001\
\035\001\007\001\037\001\038\001\003\001\046\001\047\001\068\001\
\024\001\046\001\047\001\005\001\073\001\074\001\046\001\047\001\
\005\001\058\001\059\001\060\001\061\001\058\001\059\001\060\001\
\061\001\062\001\087\001\068\001\048\001\061\001\062\001\068\001\
\067\001\074\001\005\001\005\001\068\001\074\001\099\001\100\001\
\009\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\005\001\014\001\061\001\089\001\024\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\098\001\
\031\001\005\001\056\001\000\000\006\001\031\001\032\001\014\001\
\014\001\001\001\061\001\037\001\004\001\046\001\047\001\014\001\
\005\001\005\001\010\001\005\001\046\001\047\001\014\001\019\001\
\019\001\051\001\052\001\019\001\061\001\062\001\003\001\031\001\
\005\001\031\001\007\001\068\001\009\001\031\001\031\001\012\001\
\032\001\031\001\068\001\005\001\014\001\037\001\038\001\073\001\
\006\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\014\001\014\001\087\001\004\001\000\000\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\014\001\
\092\001\099\001\100\001\067\001\001\001\031\001\032\001\004\001\
\061\001\014\001\005\001\037\001\005\001\010\001\005\001\046\001\
\047\001\014\001\093\001\003\001\046\001\031\001\019\001\048\001\
\005\001\051\001\052\001\058\001\059\001\060\001\061\001\062\001\
\003\001\016\001\098\001\032\001\016\001\068\001\035\001\016\001\
\037\001\038\001\068\001\074\001\005\001\081\001\006\001\073\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\006\001\014\001\061\001\087\001\000\000\018\001\
\019\001\020\001\021\001\022\001\023\001\041\001\067\001\024\001\
\001\001\099\001\100\001\004\001\031\001\032\001\031\001\009\001\
\074\001\004\001\037\001\004\001\008\001\014\001\003\001\024\001\
\005\001\018\001\019\001\046\001\089\001\046\001\047\001\024\001\
\051\001\052\001\048\001\024\001\019\001\098\001\007\001\013\001\
\031\001\022\001\023\001\024\001\061\001\062\001\005\001\031\001\
\057\001\068\001\031\001\068\001\031\001\005\001\073\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\046\001\014\001\006\001\087\001\000\000\018\001\019\001\
\020\001\021\001\022\001\023\001\019\001\058\001\059\001\060\001\
\099\001\100\001\001\001\031\001\032\001\004\001\024\001\068\001\
\001\001\037\001\051\001\004\001\024\001\074\001\031\001\014\001\
\005\001\041\001\017\001\004\001\019\001\014\001\004\001\051\001\
\052\001\018\001\019\001\004\001\003\001\019\001\005\001\024\001\
\007\001\032\001\009\001\019\001\081\001\012\001\014\001\038\001\
\068\001\004\001\014\001\031\001\006\001\073\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\006\001\014\001\057\001\087\001\000\000\018\001\019\001\020\001\
\021\001\022\001\023\001\031\001\048\001\005\001\048\001\099\001\
\100\001\007\001\031\001\032\001\003\001\014\001\019\001\005\001\
\037\001\014\001\014\001\001\001\031\001\014\001\004\001\058\001\
\059\001\060\001\061\001\062\001\031\001\024\001\051\001\052\001\
\014\001\014\001\019\001\017\001\019\001\019\001\003\001\074\001\
\019\001\005\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\073\001\014\001\000\000\031\001\
\038\001\018\001\019\001\020\001\021\001\022\001\023\001\031\001\
\048\001\005\001\087\001\009\001\005\001\001\001\031\001\032\001\
\004\001\024\001\019\001\057\001\037\001\008\001\099\001\100\001\
\093\001\004\001\014\001\004\001\014\001\017\001\006\001\019\001\
\007\001\014\001\051\001\052\001\014\001\005\001\005\001\046\001\
\047\001\014\001\014\001\007\001\032\001\058\001\059\001\060\001\
\061\001\062\001\038\001\058\001\059\001\060\001\061\001\000\000\
\073\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\074\001\014\001\057\001\087\001\024\001\
\018\001\019\001\020\001\021\001\022\001\023\001\088\001\005\001\
\005\001\024\001\099\001\100\001\019\001\031\001\032\001\082\001\
\082\001\007\001\005\001\037\001\009\001\046\001\047\001\003\001\
\005\001\005\001\006\001\007\001\000\000\009\001\005\001\019\001\
\012\001\051\001\052\001\014\001\061\001\062\001\005\001\082\001\
\005\001\019\001\014\001\068\001\024\001\005\001\005\001\005\001\
\014\001\005\001\019\001\031\001\009\001\024\001\034\001\073\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\046\001\014\001\007\001\087\001\024\001\018\001\
\019\001\020\001\021\001\022\001\023\001\009\001\024\001\007\001\
\014\001\099\001\100\001\001\001\031\001\032\001\004\001\012\001\
\068\001\052\001\037\001\041\001\006\001\031\001\024\001\007\001\
\014\001\061\001\009\001\017\001\009\001\019\001\005\001\003\001\
\051\001\052\001\005\001\005\001\005\001\046\001\090\001\016\001\
\016\001\014\001\032\001\005\001\007\001\097\001\014\001\005\001\
\038\001\000\000\005\001\005\001\005\001\003\001\073\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\082\001\014\001\057\001\087\001\007\001\018\001\019\001\
\020\001\021\001\022\001\023\001\012\001\007\001\086\001\031\001\
\099\001\100\001\048\001\031\001\032\001\012\001\014\001\082\001\
\023\001\037\001\005\001\005\001\000\000\000\000\000\000\000\000\
\005\001\000\000\031\001\005\001\000\000\024\001\031\001\051\001\
\052\001\005\001\005\001\005\001\005\001\005\001\005\001\005\001\
\005\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\082\001\014\001\073\001\007\001\007\001\
\018\001\019\001\020\001\021\001\022\001\023\001\005\001\005\001\
\002\001\003\001\005\001\087\001\005\001\031\001\032\001\048\001\
\005\001\005\001\031\001\037\001\007\001\005\001\007\001\099\001\
\100\001\005\001\009\001\006\001\082\001\000\000\024\001\007\001\
\007\001\051\001\052\001\007\001\030\001\007\001\005\001\005\001\
\129\000\012\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\007\001\014\001\007\001\073\001\
\130\000\018\001\019\001\020\001\021\001\022\001\059\001\230\000\
\058\001\059\001\060\001\061\001\062\001\087\001\031\001\032\001\
\134\001\138\001\000\000\057\001\037\001\179\001\001\001\117\001\
\074\001\099\001\100\001\228\003\250\000\003\001\232\003\085\002\
\087\002\005\001\051\001\052\001\008\001\233\001\010\001\011\001\
\012\001\230\001\014\001\093\001\081\002\066\001\018\001\019\001\
\020\001\021\001\024\001\023\001\135\000\029\002\092\004\021\003\
\073\001\194\003\001\001\031\001\032\001\004\001\209\002\026\003\
\016\003\037\001\128\000\255\255\255\255\255\255\087\001\014\001\
\046\001\047\001\017\001\000\000\019\001\255\255\255\255\051\001\
\052\001\255\255\099\001\100\001\058\001\059\001\060\001\061\001\
\062\001\255\255\002\001\003\001\255\255\005\001\068\001\038\001\
\255\255\255\255\255\255\255\255\074\001\073\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\081\001\022\001\023\001\
\024\001\255\255\057\001\087\001\255\255\255\255\030\001\031\001\
\092\001\255\255\255\255\255\255\255\255\004\001\005\001\099\001\
\100\001\008\001\009\001\010\001\011\001\012\001\046\001\014\001\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\255\255\
\023\001\000\000\058\001\059\001\060\001\061\001\062\001\255\255\
\031\001\032\001\255\255\255\255\068\001\003\001\037\001\005\001\
\006\001\007\001\074\001\009\001\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\051\001\052\001\255\255\255\255\
\004\001\005\001\006\001\255\255\008\001\093\001\010\001\011\001\
\012\001\031\001\014\001\255\255\034\001\255\255\018\001\019\001\
\020\001\021\001\073\001\023\001\000\000\255\255\001\001\255\255\
\046\001\004\001\255\255\031\001\032\001\255\255\255\255\255\255\
\087\001\037\001\255\255\014\001\255\255\255\255\017\001\255\255\
\019\001\255\255\255\255\255\255\099\001\100\001\068\001\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\004\001\005\001\038\001\255\255\008\001\009\001\010\001\
\011\001\012\001\255\255\014\001\090\001\073\001\255\255\018\001\
\019\001\020\001\021\001\097\001\023\001\000\000\057\001\255\255\
\255\255\255\255\255\255\087\001\031\001\032\001\255\255\255\255\
\255\255\255\255\037\001\255\255\255\255\255\255\255\255\099\001\
\100\001\255\255\255\255\003\001\255\255\255\255\004\001\005\001\
\051\001\052\001\008\001\009\001\010\001\011\001\012\001\255\255\
\014\001\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\024\001\023\001\000\000\255\255\255\255\255\255\073\001\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\087\001\255\255\046\001\047\001\
\255\255\255\255\255\255\255\255\255\255\051\001\052\001\255\255\
\099\001\100\001\058\001\059\001\060\001\061\001\062\001\004\001\
\005\001\006\001\005\001\008\001\068\001\010\001\011\001\012\001\
\255\255\014\001\074\001\073\001\255\255\018\001\019\001\020\001\
\021\001\024\001\023\001\000\000\255\255\024\001\255\255\255\255\
\255\255\087\001\031\001\032\001\255\255\255\255\255\255\034\001\
\037\001\255\255\255\255\255\255\255\255\099\001\100\001\046\001\
\047\001\255\255\255\255\046\001\047\001\255\255\051\001\052\001\
\255\255\255\255\255\255\058\001\059\001\060\001\061\001\058\001\
\059\001\060\001\061\001\255\255\255\255\068\001\000\000\255\255\
\255\255\068\001\255\255\074\001\073\001\255\255\005\001\074\001\
\255\255\008\001\009\001\010\001\011\001\012\001\255\255\014\001\
\255\255\255\255\087\001\018\001\019\001\020\001\021\001\255\255\
\023\001\255\255\255\255\255\255\255\255\255\255\099\001\100\001\
\031\001\032\001\255\255\255\255\255\255\003\001\037\001\005\001\
\006\001\007\001\255\255\009\001\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\051\001\052\001\255\255\000\000\
\004\001\005\001\024\001\255\255\008\001\255\255\010\001\011\001\
\012\001\031\001\014\001\255\255\034\001\255\255\018\001\019\001\
\020\001\021\001\073\001\023\001\255\255\255\255\255\255\255\255\
\046\001\047\001\255\255\031\001\032\001\255\255\255\255\255\255\
\087\001\037\001\255\255\255\255\058\001\059\001\060\001\061\001\
\255\255\255\255\000\000\255\255\099\001\100\001\068\001\051\001\
\052\001\255\255\255\255\255\255\074\001\255\255\255\255\255\255\
\255\255\004\001\005\001\255\255\255\255\008\001\255\255\010\001\
\011\001\012\001\255\255\014\001\090\001\073\001\255\255\018\001\
\019\001\020\001\021\001\097\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\087\001\031\001\032\001\255\255\255\255\
\255\255\255\255\037\001\255\255\255\255\255\255\255\255\099\001\
\100\001\255\255\255\255\000\000\255\255\255\255\004\001\005\001\
\051\001\052\001\008\001\255\255\010\001\011\001\012\001\255\255\
\014\001\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\255\255\023\001\255\255\002\001\255\255\255\255\073\001\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\087\001\255\255\000\000\255\255\
\255\255\024\001\255\255\255\255\255\255\051\001\052\001\030\001\
\099\001\100\001\255\255\255\255\255\255\255\255\255\255\004\001\
\005\001\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\255\255\014\001\255\255\073\001\255\255\018\001\019\001\020\001\
\021\001\255\255\023\001\058\001\059\001\060\001\061\001\062\001\
\255\255\087\001\031\001\032\001\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\074\001\255\255\099\001\100\001\000\000\
\255\255\255\255\004\001\005\001\255\255\255\255\051\001\052\001\
\010\001\011\001\012\001\255\255\014\001\255\255\093\001\255\255\
\018\001\019\001\020\001\021\001\255\255\023\001\255\255\255\255\
\003\001\255\255\255\255\255\255\073\001\031\001\032\001\255\255\
\255\255\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\087\001\255\255\000\000\024\001\255\255\255\255\
\255\255\051\001\052\001\255\255\255\255\255\255\099\001\100\001\
\255\255\255\255\255\255\004\001\005\001\255\255\255\255\008\001\
\255\255\010\001\011\001\046\001\047\001\014\001\255\255\073\001\
\255\255\018\001\019\001\020\001\021\001\255\255\023\001\058\001\
\059\001\060\001\061\001\062\001\255\255\087\001\031\001\032\001\
\255\255\068\001\255\255\255\255\037\001\255\255\255\255\074\001\
\255\255\099\001\100\001\255\255\255\255\000\000\004\001\005\001\
\255\255\255\255\051\001\052\001\010\001\011\001\012\001\255\255\
\014\001\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\073\001\031\001\032\001\255\255\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\087\001\255\255\
\000\000\255\255\255\255\255\255\255\255\051\001\052\001\255\255\
\255\255\255\255\099\001\100\001\255\255\255\255\255\255\004\001\
\005\001\255\255\255\255\008\001\255\255\010\001\011\001\255\255\
\255\255\014\001\255\255\073\001\255\255\018\001\019\001\020\001\
\021\001\255\255\023\001\255\255\000\000\255\255\255\255\255\255\
\255\255\087\001\031\001\032\001\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\255\255\255\255\099\001\100\001\255\255\
\255\255\255\255\004\001\005\001\255\255\255\255\051\001\052\001\
\010\001\011\001\012\001\255\255\014\001\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\255\255\023\001\255\255\002\001\
\003\001\255\255\005\001\000\000\073\001\031\001\032\001\255\255\
\255\255\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\087\001\022\001\023\001\024\001\255\255\255\255\
\255\255\051\001\052\001\030\001\031\001\255\255\099\001\100\001\
\255\255\255\255\255\255\004\001\005\001\255\255\255\255\008\001\
\255\255\010\001\011\001\046\001\255\255\014\001\255\255\073\001\
\255\255\018\001\019\001\020\001\021\001\255\255\023\001\058\001\
\059\001\060\001\061\001\062\001\255\255\087\001\031\001\032\001\
\255\255\068\001\255\255\255\255\037\001\255\255\255\255\074\001\
\255\255\099\001\100\001\255\255\255\255\003\001\255\255\255\255\
\004\001\005\001\051\001\052\001\008\001\255\255\010\001\011\001\
\012\001\255\255\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\024\001\255\255\255\255\255\255\255\255\255\255\
\073\001\255\255\255\255\031\001\032\001\255\255\255\255\255\255\
\255\255\037\001\255\255\255\255\255\255\255\255\087\001\255\255\
\046\001\047\001\255\255\255\255\255\255\255\255\255\255\051\001\
\052\001\255\255\099\001\100\001\058\001\059\001\060\001\061\001\
\062\001\004\001\005\001\255\255\255\255\255\255\068\001\010\001\
\011\001\012\001\255\255\014\001\074\001\073\001\255\255\018\001\
\019\001\020\001\021\001\255\255\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\087\001\031\001\032\001\255\255\255\255\
\255\255\255\255\037\001\255\255\255\255\255\255\255\255\099\001\
\100\001\255\255\255\255\255\255\004\001\005\001\255\255\255\255\
\051\001\052\001\010\001\011\001\012\001\255\255\014\001\012\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\024\001\255\255\255\255\073\001\031\001\
\032\001\255\255\255\255\255\255\255\255\037\001\255\255\003\001\
\255\255\005\001\006\001\007\001\087\001\009\001\255\255\255\255\
\012\001\046\001\047\001\051\001\052\001\255\255\255\255\255\255\
\099\001\100\001\255\255\255\255\024\001\058\001\059\001\060\001\
\061\001\062\001\255\255\031\001\255\255\255\255\255\255\068\001\
\255\255\073\001\255\255\255\255\255\255\074\001\255\255\043\001\
\044\001\045\001\046\001\047\001\255\255\255\255\003\001\087\001\
\005\001\006\001\007\001\255\255\009\001\255\255\255\255\012\001\
\255\255\061\001\062\001\099\001\100\001\255\255\255\255\255\255\
\068\001\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\086\001\255\255\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\255\255\004\001\255\255\255\255\255\255\
\008\001\255\255\010\001\011\001\012\001\255\255\014\001\255\255\
\255\255\062\001\018\001\019\001\020\001\021\001\255\255\068\001\
\255\255\255\255\255\255\024\001\004\001\255\255\255\255\255\255\
\032\001\255\255\010\001\011\001\012\001\037\001\014\001\255\255\
\255\255\086\001\018\001\019\001\020\001\021\001\043\001\044\001\
\045\001\046\001\047\001\051\001\052\001\255\255\255\255\255\255\
\032\001\255\255\255\255\255\255\255\255\037\001\255\255\255\255\
\061\001\062\001\255\255\255\255\255\255\255\255\255\255\068\001\
\255\255\073\001\004\001\051\001\052\001\255\255\007\001\255\255\
\010\001\011\001\012\001\255\255\014\001\255\255\255\255\087\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\024\001\
\255\255\073\001\255\255\099\001\100\001\255\255\032\001\255\255\
\255\255\034\001\003\001\037\001\005\001\006\001\007\001\087\001\
\009\001\255\255\255\255\012\001\255\255\046\001\047\001\255\255\
\255\255\051\001\052\001\099\001\100\001\255\255\255\255\024\001\
\255\255\058\001\059\001\060\001\061\001\005\001\031\001\255\255\
\255\255\034\001\255\255\068\001\255\255\255\255\255\255\073\001\
\255\255\074\001\255\255\255\255\255\255\046\001\047\001\255\255\
\024\001\255\255\255\255\255\255\255\255\087\001\255\255\255\255\
\255\255\058\001\059\001\060\001\061\001\255\255\255\255\255\255\
\255\255\099\001\100\001\068\001\255\255\255\255\046\001\047\001\
\003\001\074\001\005\001\006\001\007\001\255\255\009\001\255\255\
\255\255\012\001\058\001\059\001\060\001\061\001\062\001\255\255\
\255\255\090\001\255\255\255\255\068\001\024\001\255\255\255\255\
\097\001\255\255\074\001\255\255\031\001\255\255\255\255\034\001\
\255\255\003\001\255\255\005\001\255\255\007\001\255\255\009\001\
\255\255\255\255\012\001\046\001\047\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\058\001\
\059\001\060\001\255\255\255\255\255\255\031\001\255\255\255\255\
\034\001\068\001\255\255\255\255\255\255\255\255\255\255\074\001\
\255\255\255\255\255\255\255\255\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\090\001\
\058\001\059\001\060\001\061\001\255\255\003\001\097\001\005\001\
\006\001\007\001\068\001\009\001\255\255\255\255\012\001\255\255\
\074\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\003\001\024\001\005\001\006\001\007\001\255\255\009\001\
\090\001\031\001\012\001\255\255\034\001\255\255\255\255\097\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\046\001\047\001\255\255\255\255\255\255\031\001\255\255\255\255\
\034\001\255\255\255\255\255\255\255\255\059\001\060\001\255\255\
\255\255\255\255\255\255\255\255\046\001\047\001\068\001\255\255\
\255\255\255\255\255\255\255\255\074\001\003\001\255\255\005\001\
\006\001\007\001\060\001\009\001\255\255\003\001\012\001\005\001\
\006\001\007\001\068\001\009\001\090\001\255\255\012\001\255\255\
\074\001\255\255\024\001\097\001\023\001\024\001\255\255\255\255\
\255\255\031\001\024\001\255\255\034\001\255\255\255\255\255\255\
\090\001\031\001\255\255\006\001\034\001\255\255\009\001\097\001\
\046\001\047\001\255\255\046\001\047\001\255\255\255\255\255\255\
\046\001\047\001\255\255\255\255\255\255\024\001\255\255\058\001\
\059\001\060\001\061\001\062\001\031\001\255\255\068\001\034\001\
\255\255\068\001\255\255\255\255\074\001\255\255\068\001\074\001\
\255\255\255\255\255\255\046\001\047\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\090\001\255\255\255\255\058\001\
\059\001\060\001\061\001\097\001\090\001\255\255\004\001\255\255\
\006\001\068\001\008\001\097\001\010\001\011\001\012\001\074\001\
\014\001\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\090\001\
\255\255\255\255\032\001\255\255\255\255\255\255\097\001\255\255\
\255\255\255\255\005\001\004\001\255\255\006\001\255\255\008\001\
\046\001\010\001\011\001\012\001\255\255\014\001\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\024\001\255\255\024\001\
\062\001\255\255\255\255\255\255\255\255\255\255\068\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\077\001\
\078\001\079\001\080\001\046\001\047\001\046\001\255\255\255\255\
\255\255\087\001\255\255\255\255\255\255\091\001\255\255\058\001\
\059\001\060\001\061\001\062\001\255\255\062\001\255\255\255\255\
\255\255\068\001\255\255\068\001\255\255\255\255\255\255\074\001\
\255\255\255\255\255\255\255\255\077\001\255\255\079\001\080\001\
\025\001\026\001\027\001\028\001\255\255\255\255\087\001\032\001\
\033\001\255\255\091\001\036\001\037\001\038\001\039\001\040\001\
\255\255\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\255\255\255\255\255\255\054\001\055\001\255\255\
\002\001\003\001\255\255\005\001\255\255\255\255\063\001\064\001\
\255\255\066\001\255\255\255\255\069\001\070\001\071\001\072\001\
\255\255\255\255\075\001\076\001\022\001\023\001\024\001\255\255\
\255\255\255\255\083\001\084\001\030\001\031\001\255\255\255\255\
\255\255\002\001\003\001\255\255\005\001\094\001\095\001\096\001\
\255\255\098\001\255\255\255\255\046\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\023\001\024\001\
\058\001\059\001\060\001\061\001\062\001\030\001\031\001\255\255\
\255\255\255\255\068\001\003\001\255\255\005\001\255\255\255\255\
\074\001\255\255\255\255\255\255\255\255\046\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\024\001\058\001\059\001\060\001\061\001\062\001\255\255\031\001\
\003\001\255\255\255\255\068\001\003\001\255\255\005\001\255\255\
\255\255\074\001\255\255\255\255\255\255\255\255\046\001\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\255\255\022\001\
\023\001\024\001\058\001\059\001\060\001\061\001\062\001\034\001\
\031\001\003\001\255\255\255\255\068\001\255\255\255\255\255\255\
\255\255\255\255\074\001\046\001\047\001\024\001\255\255\046\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\058\001\
\059\001\060\001\061\001\058\001\059\001\060\001\061\001\062\001\
\034\001\068\001\006\001\046\001\047\001\068\001\255\255\074\001\
\255\255\255\255\255\255\074\001\046\001\047\001\255\255\058\001\
\059\001\060\001\061\001\062\001\024\001\255\255\255\255\255\255\
\058\001\059\001\060\001\061\001\255\255\255\255\255\255\074\001\
\255\255\255\255\068\001\255\255\255\255\024\001\255\255\255\255\
\074\001\255\255\046\001\047\001\255\255\255\255\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\255\255\058\001\059\001\
\060\001\061\001\062\001\046\001\047\001\009\001\255\255\255\255\
\068\001\255\255\255\255\255\255\255\255\255\255\074\001\058\001\
\059\001\060\001\061\001\255\255\024\001\255\255\009\001\255\255\
\255\255\068\001\255\255\255\255\255\255\255\255\034\001\074\001\
\255\255\255\255\255\255\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\046\001\047\001\255\255\255\255\255\255\090\001\
\255\255\255\255\255\255\009\001\255\255\255\255\058\001\059\001\
\060\001\061\001\255\255\046\001\047\001\255\255\255\255\255\255\
\068\001\255\255\024\001\255\255\009\001\255\255\074\001\058\001\
\059\001\060\001\061\001\062\001\034\001\255\255\255\255\255\255\
\255\255\068\001\255\255\024\001\255\255\255\255\255\255\074\001\
\046\001\047\001\255\255\255\255\255\255\034\001\255\255\255\255\
\255\255\255\255\255\255\255\255\058\001\059\001\060\001\061\001\
\255\255\046\001\047\001\255\255\255\255\012\001\068\001\255\255\
\255\255\012\001\255\255\255\255\074\001\058\001\059\001\060\001\
\061\001\024\001\255\255\255\255\255\255\024\001\255\255\068\001\
\255\255\255\255\255\255\034\001\255\255\074\001\255\255\255\255\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\046\001\
\047\001\255\255\255\255\046\001\047\001\255\255\024\001\255\255\
\255\255\255\255\255\255\058\001\059\001\060\001\061\001\058\001\
\059\001\060\001\061\001\062\001\255\255\068\001\022\001\255\255\
\024\001\068\001\255\255\074\001\046\001\047\001\255\255\074\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\058\001\059\001\060\001\061\001\062\001\255\255\046\001\047\001\
\255\255\255\255\068\001\022\001\255\255\024\001\255\255\255\255\
\074\001\255\255\058\001\059\001\060\001\061\001\062\001\255\255\
\255\255\255\255\255\255\255\255\068\001\255\255\024\001\255\255\
\255\255\255\255\074\001\046\001\047\001\031\001\255\255\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\058\001\
\059\001\060\001\061\001\062\001\046\001\047\001\255\255\255\255\
\255\255\068\001\255\255\255\255\255\255\024\001\255\255\074\001\
\058\001\059\001\060\001\061\001\031\001\255\255\255\255\034\001\
\255\255\255\255\068\001\255\255\255\255\255\255\024\001\255\255\
\074\001\255\255\255\255\046\001\047\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\058\001\
\059\001\060\001\061\001\255\255\046\001\047\001\024\001\255\255\
\255\255\068\001\255\255\024\001\255\255\031\001\255\255\074\001\
\058\001\059\001\060\001\061\001\062\001\034\001\255\255\255\255\
\255\255\255\255\068\001\255\255\046\001\047\001\024\001\255\255\
\074\001\046\001\047\001\255\255\255\255\255\255\255\255\255\255\
\058\001\059\001\060\001\061\001\062\001\058\001\059\001\060\001\
\061\001\255\255\068\001\255\255\046\001\047\001\255\255\068\001\
\074\001\255\255\255\255\255\255\255\255\074\001\255\255\255\255\
\058\001\059\001\060\001\061\001\062\001\255\255\255\255\255\255\
\255\255\255\255\068\001\255\255\255\255\255\255\255\255\255\255\
\074\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  AT\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  SELECT\000\
  PHASE\000\
  BARRIER\000\
  AMONG\000\
  WEAKSECRET\000\
  PARAM\000\
  ORTEXT\000\
  FAIL\000\
  LESS\000\
  GREATER\000\
  GEQ\000\
  PLUS\000\
  MINUS\000\
  TYPE\000\
  SET\000\
  FORALL\000\
  CONST\000\
  INJEVENT\000\
  OR\000\
  CHANNEL\000\
  LETFUN\000\
  DEFINE\000\
  EXPAND\000\
  YIELD\000\
  LEQ\000\
  PROBA\000\
  LETPROBA\000\
  OPTIMIF\000\
  ISCST\000\
  COUNT\000\
  LBRACE\000\
  RBRACE\000\
  PROOF\000\
  IMPLEMENTATION\000\
  EQUIVALENCE\000\
  OTHERWISE\000\
  FOREACH\000\
  DO\000\
  SECRET\000\
  PUBLICVARS\000\
  RANDOM\000\
  LEFTARROW\000\
  POWER\000\
  LEMMA\000\
  AXIOM\000\
  RESTRICTION\000\
  FOR\000\
  TABLE\000\
  INSERT\000\
  GET\000\
  "

let yynames_block = "\
  IDENT\000\
  TAG\000\
  STRING\000\
  PROJECTION\000\
  UNDERSCORE\000\
  INT\000\
  FLOAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 225 "pitparser.mly"
      ( (* Options are ignored, they are supported for compatibility with
             CryptoVerif only *)
          TTypeDecl(_2) :: _5 )
# 2095 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 229 "pitparser.mly"
      ( (TFunDecl(_2, _4, _7, _8)) :: _10 )
# 2106 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'typeid) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'treducmayfail) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _12 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 231 "pitparser.mly"
      ( (TReducFail(_2,_4,_7,_9, _10)) :: _12 )
# 2118 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'treduc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 233 "pitparser.mly"
      ( (TReduc(_2,_3)) :: _5 )
# 2127 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 235 "pitparser.mly"
      ( (List.map (fun x -> TConstDecl(x, _4, _5)) _2) @ _7 )
# 2137 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'eqlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 237 "pitparser.mly"
      ( (TEquation(_2, _3)) :: _5 )
# 2146 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 239 "pitparser.mly"
      ( (TEventDecl(_2, [])) :: _4 )
# 2154 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 241 "pitparser.mly"
      ( (TEventDecl(_2, _4)) :: _7 )
# 2163 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typeidseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 243 "pitparser.mly"
      ( (TPredDecl(_2, _4, _6)) :: _8 )
# 2173 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 245 "pitparser.mly"
      ( (TPredDecl(_2, [], _3)) :: _5 )
# 2182 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 247 "pitparser.mly"
      ( (TTableDecl(_2, _4)) :: _7 )
# 2191 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 249 "pitparser.mly"
      ( (TPDef(_2,[],_4)) :: _6 )
# 2200 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'mayfailvartypeseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 251 "pitparser.mly"
      ( (TPDef(_2,_4,_7)) :: _9 )
# 2210 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 253 "pitparser.mly"
      ( (TLetFun(_2,[],_4)) :: _6 )
# 2219 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'mayfailvartypeseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 255 "pitparser.mly"
      ( (TLetFun(_2,_4,_7)) :: _9 )
# 2229 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 257 "pitparser.mly"
      ( (TSet(_2,S _4)) :: _6 )
# 2238 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 259 "pitparser.mly"
      ( (TSet(_2,S _4)) :: _6 )
# 2247 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 261 "pitparser.mly"
      ( (TSet(_2,I _4)) :: _6 )
# 2256 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'tfnebindingseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'nounif_value) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 263 "pitparser.mly"
      ( (TNoUnif (_2, _4, _5, _6)) :: _8 )
# 2267 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tfnebindingseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'nounif_value) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 265 "pitparser.mly"
      ( (TNoUnif ([], _2, _3, _4)) :: _6 )
# 2277 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'tfnebindingseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'select_value) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 267 "pitparser.mly"
      ( (TNoUnif (_2, _4, _5, _6)) :: _8 )
# 2288 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tfnebindingseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'select_value) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 269 "pitparser.mly"
      ( (TNoUnif ([], _2, _3, _4)) :: _6 )
# 2298 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tqueryseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 271 "pitparser.mly"
      ( (TQuery(_2,_4,_5)) :: _7 )
# 2308 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'tqueryseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 273 "pitparser.mly"
      ( (TQuery([],_2,_3)) :: _5 )
# 2317 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 275 "pitparser.mly"
      ( (TNoninterf(_2, _4)) :: _6 )
# 2326 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 277 "pitparser.mly"
      ( (TNoninterf([], _2)) :: _4 )
# 2334 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 279 "pitparser.mly"
      ( (TWeaksecret(_2)) :: _4 )
# 2342 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 281 "pitparser.mly"
      ( (TNot(_2, _4)) :: _6 )
# 2351 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 283 "pitparser.mly"
      ( (TNot([], _2)) :: _4 )
# 2359 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'neidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 285 "pitparser.mly"
      ( (* Supported for compatility with CryptoVerif only *)
        _5 )
# 2369 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'probaargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 288 "pitparser.mly"
      ( (* Supported for compatility with CryptoVerif only *)
        _6 )
# 2380 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'letprobaargs) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 291 "pitparser.mly"
      ( (* Supported for compatility with CryptoVerif only *)
        _7 )
# 2391 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 294 "pitparser.mly"
      ( (* Supported for compatility with CryptoVerif only *)
        _5 )
# 2400 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'impllist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 297 "pitparser.mly"
      ( (* Supported for compatility with CryptoVerif only *)
        _4 )
# 2409 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nemayfailvartypeseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 300 "pitparser.mly"
      ( (TElimtrue (_2,_4)) :: _6 )
# 2418 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 302 "pitparser.mly"
      ( (TElimtrue ([],_2)) :: _4 )
# 2426 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 304 "pitparser.mly"
      ( (* For compatibility with CryptoVerif, allow
            channel c1...cn.
           as a synonym for
            free c1...cn:channel. *)
        (List.map (fun x -> TFree(x, ("channel", dummy_ext), [])) _2) @ _4 )
# 2438 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 310 "pitparser.mly"
      ( (List.map (fun x -> TFree(x, _4, _5)) _2) @ _7 )
# 2448 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 312 "pitparser.mly"
      ( (TClauses(_2)) :: _3 )
# 2456 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.tdecl list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 314 "pitparser.mly"
      ( (TDefine(_2, _4, _7)) :: _9 )
# 2466 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 316 "pitparser.mly"
      ( (TExpand(_2, _4)) :: _7 )
# 2475 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'lemma) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tlemmaseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 318 "pitparser.mly"
      ( (TLemma(_1,_2,_4,_5)) :: _7 )
# 2486 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lemma) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'tlemmaseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 320 "pitparser.mly"
      ( (TLemma(_1,[],_2,_3)) :: _5 )
# 2496 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 322 "pitparser.mly"
      ( [] )
# 2502 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 326 "pitparser.mly"
      ( KLemma )
# 2508 "pitparser.ml"
               : 'lemma))
; (fun __caml_parser_env ->
    Obj.repr(
# 328 "pitparser.mly"
      ( KAxiom )
# 2514 "pitparser.ml"
               : 'lemma))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "pitparser.mly"
      ( KRestriction )
# 2520 "pitparser.ml"
               : 'lemma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 334 "pitparser.mly"
 ( _1, _3, None )
# 2528 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess_e * Pitptree.tprocess_e option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 336 "pitparser.mly"
 ( _1, _3, Some _4 )
# 2537 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess_e * Pitptree.tprocess_e option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 342 "pitparser.mly"
        ( _1 )
# 2544 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 344 "pitparser.mly"
        ( _1 )
# 2551 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 346 "pitparser.mly"
        ( string_of_int _1, parse_extent() )
# 2558 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 348 "pitparser.mly"
        ( "*", parse_extent() )
# 2564 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 350 "pitparser.mly"
        ( ".", parse_extent() )
# 2570 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 352 "pitparser.mly"
        ( "set", parse_extent() )
# 2576 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 354 "pitparser.mly"
        ( "insert", parse_extent() )
# 2582 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 356 "pitparser.mly"
        ( "=", parse_extent() )
# 2588 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 358 "pitparser.mly"
        ( ",", parse_extent() )
# 2594 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 360 "pitparser.mly"
        ( "(", parse_extent() )
# 2600 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 362 "pitparser.mly"
        ( ")", parse_extent() )
# 2606 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prooftoken) in
    Obj.repr(
# 366 "pitparser.mly"
        ( [_1] )
# 2613 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prooftoken) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 368 "pitparser.mly"
        ( _1 :: _2 )
# 2621 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 372 "pitparser.mly"
 ( [_1] )
# 2628 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proofcommand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proof) in
    Obj.repr(
# 374 "pitparser.mly"
        ( _1 :: _3 )
# 2636 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'impl) in
    Obj.repr(
# 380 "pitparser.mly"
        ( [_1] )
# 2643 "pitparser.ml"
               : 'impllist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'impl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'impllist) in
    Obj.repr(
# 382 "pitparser.mly"
        ( _1 :: _3 )
# 2651 "pitparser.ml"
               : 'impllist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cvtypeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'typeoptions) in
    Obj.repr(
# 386 "pitparser.mly"
        ( () )
# 2660 "pitparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'functionoptions) in
    Obj.repr(
# 388 "pitparser.mly"
        ( () )
# 2669 "pitparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 390 "pitparser.mly"
        ( () )
# 2677 "pitparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 392 "pitparser.mly"
        ( () )
# 2685 "pitparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 396 "pitparser.mly"
        ( () )
# 2692 "pitparser.ml"
               : 'cvtypeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 398 "pitparser.mly"
        ( () )
# 2699 "pitparser.ml"
               : 'cvtypeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 402 "pitparser.mly"
        ( [_1] )
# 2706 "pitparser.ml"
               : 'stringlistne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stringlistne) in
    Obj.repr(
# 404 "pitparser.mly"
        ( _1::_3 )
# 2714 "pitparser.ml"
               : 'stringlistne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stringlistne) in
    Obj.repr(
# 408 "pitparser.mly"
        ( _1,_3 )
# 2722 "pitparser.ml"
               : 'typeopt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stringlistne) in
    Obj.repr(
# 410 "pitparser.mly"
        ( ("pred",parse_extent()),_3 )
# 2729 "pitparser.ml"
               : 'typeopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeopt) in
    Obj.repr(
# 414 "pitparser.mly"
        ( [_1] )
# 2736 "pitparser.ml"
               : 'typeoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeoptlist) in
    Obj.repr(
# 416 "pitparser.mly"
        ( _1::_3 )
# 2744 "pitparser.ml"
               : 'typeoptlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeoptlist) in
    Obj.repr(
# 420 "pitparser.mly"
        ( _2 )
# 2751 "pitparser.ml"
               : 'typeoptions))
; (fun __caml_parser_env ->
    Obj.repr(
# 422 "pitparser.mly"
        ( [] )
# 2757 "pitparser.ml"
               : 'typeoptions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 426 "pitparser.mly"
        ( _1,_3 )
# 2765 "pitparser.ml"
               : 'funopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funopt) in
    Obj.repr(
# 430 "pitparser.mly"
        ( [_1] )
# 2772 "pitparser.ml"
               : 'funoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'funopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'funoptlist) in
    Obj.repr(
# 432 "pitparser.mly"
        ( _1::_3 )
# 2780 "pitparser.ml"
               : 'funoptlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'funoptlist) in
    Obj.repr(
# 436 "pitparser.mly"
        ( _2 )
# 2787 "pitparser.ml"
               : 'functionoptions))
; (fun __caml_parser_env ->
    Obj.repr(
# 438 "pitparser.mly"
        ( [] )
# 2793 "pitparser.ml"
               : 'functionoptions))
; (fun __caml_parser_env ->
    Obj.repr(
# 443 "pitparser.mly"
    ( None )
# 2799 "pitparser.ml"
               : 'probaargs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dimlist) in
    Obj.repr(
# 445 "pitparser.mly"
    ( Some _2 )
# 2806 "pitparser.ml"
               : 'probaargs))
; (fun __caml_parser_env ->
    Obj.repr(
# 448 "pitparser.mly"
    ( [] )
# 2812 "pitparser.ml"
               : 'dimlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nedimlist) in
    Obj.repr(
# 450 "pitparser.mly"
    ( _1 )
# 2819 "pitparser.ml"
               : 'dimlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dimext) in
    Obj.repr(
# 454 "pitparser.mly"
    ( [_1] )
# 2826 "pitparser.ml"
               : 'nedimlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dimext) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nedimlist) in
    Obj.repr(
# 456 "pitparser.mly"
    ( _1 :: _3 )
# 2834 "pitparser.ml"
               : 'nedimlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dim) in
    Obj.repr(
# 460 "pitparser.mly"
    ( _1, parse_extent() )
# 2841 "pitparser.ml"
               : 'dimext))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'poweropt) in
    Obj.repr(
# 465 "pitparser.mly"
    ( (0, 0) )
# 2849 "pitparser.ml"
               : 'dim))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dim) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dim) in
    Obj.repr(
# 467 "pitparser.mly"
    ( (0,0) )
# 2857 "pitparser.ml"
               : 'dim))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dim) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dim) in
    Obj.repr(
# 469 "pitparser.mly"
    ( (0,0) )
# 2865 "pitparser.ml"
               : 'dim))
; (fun __caml_parser_env ->
    Obj.repr(
# 472 "pitparser.mly"
    ( 1 )
# 2871 "pitparser.ml"
               : 'poweropt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 474 "pitparser.mly"
    ( _2 )
# 2878 "pitparser.ml"
               : 'poweropt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 476 "pitparser.mly"
    ( -_3 )
# 2885 "pitparser.ml"
               : 'poweropt))
; (fun __caml_parser_env ->
    Obj.repr(
# 479 "pitparser.mly"
    ( [] )
# 2891 "pitparser.ml"
               : 'letprobaargs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'probaarglist) in
    Obj.repr(
# 481 "pitparser.mly"
    ( _2 )
# 2898 "pitparser.ml"
               : 'letprobaargs))
; (fun __caml_parser_env ->
    Obj.repr(
# 484 "pitparser.mly"
    ( [] )
# 2904 "pitparser.ml"
               : 'probaarglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neprobaarglist) in
    Obj.repr(
# 486 "pitparser.mly"
    ( _1 )
# 2911 "pitparser.ml"
               : 'probaarglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardim) in
    Obj.repr(
# 490 "pitparser.mly"
    ( _1 )
# 2918 "pitparser.ml"
               : 'neprobaarglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vardim) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neprobaarglist) in
    Obj.repr(
# 492 "pitparser.mly"
    ( _1 @ _3 )
# 2926 "pitparser.ml"
               : 'neprobaarglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dimext) in
    Obj.repr(
# 496 "pitparser.mly"
    ( List.map (fun i -> (i,_3)) _1 )
# 2934 "pitparser.ml"
               : 'vardim))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'probaflist) in
    Obj.repr(
# 503 "pitparser.mly"
        ( () )
# 2941 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 505 "pitparser.mly"
        ( () )
# 2948 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 507 "pitparser.mly"
        ( () )
# 2956 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 509 "pitparser.mly"
        ( () )
# 2964 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 511 "pitparser.mly"
        ( () )
# 2972 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 513 "pitparser.mly"
        ( () )
# 2980 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 515 "pitparser.mly"
        ( () )
# 2988 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'probaf) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 517 "pitparser.mly"
        ( () )
# 2996 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'probaflist) in
    Obj.repr(
# 519 "pitparser.mly"
        ( () )
# 3004 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 521 "pitparser.mly"
        ( () )
# 3013 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 523 "pitparser.mly"
        ( () )
# 3022 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'identlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 525 "pitparser.mly"
        ( () )
# 3031 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 527 "pitparser.mly"
        ( () )
# 3040 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'neidentseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 529 "pitparser.mly"
        ( () )
# 3050 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 531 "pitparser.mly"
        ( () )
# 3058 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'probaoptimcond) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 533 "pitparser.mly"
        ( () )
# 3067 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 535 "pitparser.mly"
        ( () )
# 3074 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 537 "pitparser.mly"
        ( () )
# 3081 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    Obj.repr(
# 539 "pitparser.mly"
        ( () )
# 3088 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    Obj.repr(
# 541 "pitparser.mly"
        ( () )
# 3095 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    Obj.repr(
# 543 "pitparser.mly"
        ( () )
# 3102 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    Obj.repr(
# 545 "pitparser.mly"
        ( () )
# 3110 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    Obj.repr(
# 547 "pitparser.mly"
        ( () )
# 3117 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    Obj.repr(
# 549 "pitparser.mly"
        ( () )
# 3124 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    Obj.repr(
# 551 "pitparser.mly"
        ( () )
# 3132 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    Obj.repr(
# 553 "pitparser.mly"
        ( () )
# 3140 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    Obj.repr(
# 555 "pitparser.mly"
        ( () )
# 3147 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 557 "pitparser.mly"
        ( () )
# 3156 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 559 "pitparser.mly"
        ( ()  )
# 3163 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 561 "pitparser.mly"
        ( ()  )
# 3170 "pitparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    Obj.repr(
# 567 "pitparser.mly"
        ( [] )
# 3176 "pitparser.ml"
               : 'identlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 569 "pitparser.mly"
        ( _1 )
# 3183 "pitparser.ml"
               : 'identlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'probaoptimcond) in
    Obj.repr(
# 573 "pitparser.mly"
    ( _2 )
# 3190 "pitparser.ml"
               : 'probaoptimcond))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'probaf) in
    Obj.repr(
# 575 "pitparser.mly"
    ( () )
# 3197 "pitparser.ml"
               : 'probaoptimcond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 577 "pitparser.mly"
    ( () )
# 3205 "pitparser.ml"
               : 'probaoptimcond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 579 "pitparser.mly"
    ( () )
# 3213 "pitparser.ml"
               : 'probaoptimcond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 581 "pitparser.mly"
    ( () )
# 3221 "pitparser.ml"
               : 'probaoptimcond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 583 "pitparser.mly"
    ( () )
# 3229 "pitparser.ml"
               : 'probaoptimcond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 585 "pitparser.mly"
    ( () )
# 3237 "pitparser.ml"
               : 'probaoptimcond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaoptimcond) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaoptimcond) in
    Obj.repr(
# 587 "pitparser.mly"
    ( () )
# 3245 "pitparser.ml"
               : 'probaoptimcond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaoptimcond) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaoptimcond) in
    Obj.repr(
# 589 "pitparser.mly"
    ( () )
# 3253 "pitparser.ml"
               : 'probaoptimcond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'probaoptimcond) in
    Obj.repr(
# 591 "pitparser.mly"
    ( () )
# 3261 "pitparser.ml"
               : 'probaoptimcond))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'probaflist) in
    Obj.repr(
# 595 "pitparser.mly"
       ( _2 )
# 3268 "pitparser.ml"
               : 'probaflistopt))
; (fun __caml_parser_env ->
    Obj.repr(
# 597 "pitparser.mly"
       ( [] )
# 3274 "pitparser.ml"
               : 'probaflistopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 601 "pitparser.mly"
       ( [_1] )
# 3281 "pitparser.ml"
               : 'probaflist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaflist) in
    Obj.repr(
# 603 "pitparser.mly"
       ( _1 :: _3 )
# 3289 "pitparser.ml"
               : 'probaflist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'optionseq) in
    Obj.repr(
# 609 "pitparser.mly"
      ( _2 )
# 3296 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    Obj.repr(
# 611 "pitparser.mly"
      ( [] )
# 3302 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 615 "pitparser.mly"
      ( _1, None )
# 3309 "pitparser.ml"
               : 'singleoption))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 617 "pitparser.mly"
      ( _1, Some [_3] )
# 3317 "pitparser.ml"
               : 'singleoption))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 619 "pitparser.mly"
      ( _1, Some _4 )
# 3325 "pitparser.ml"
               : 'singleoption))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'singleoption) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optionseq) in
    Obj.repr(
# 623 "pitparser.mly"
      ( _1 :: _3 )
# 3333 "pitparser.ml"
               : 'optionseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'singleoption) in
    Obj.repr(
# 625 "pitparser.mly"
      ( [_1] )
# 3340 "pitparser.ml"
               : 'optionseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 629 "pitparser.mly"
    ( _1 :: _3 )
# 3348 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 631 "pitparser.mly"
    ( [_1] )
# 3355 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 635 "pitparser.mly"
    ( None )
# 3361 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    Obj.repr(
# 637 "pitparser.mly"
    ( Some [] )
# 3367 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 639 "pitparser.mly"
    ( Some (_2) )
# 3374 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 646 "pitparser.mly"
    ( List.map (fun x -> (x,_5)) (_1::_3) )
# 3383 "pitparser.ml"
               : 'onevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 648 "pitparser.mly"
    ( [(_1,_3)] )
# 3391 "pitparser.ml"
               : 'onevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'onevartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 652 "pitparser.mly"
        ( _1 @ _3 )
# 3399 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'onevartype) in
    Obj.repr(
# 655 "pitparser.mly"
        ( _1 )
# 3406 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nevartype) in
    Obj.repr(
# 659 "pitparser.mly"
        ( _2 )
# 3413 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 661 "pitparser.mly"
        ( [] )
# 3419 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 665 "pitparser.mly"
        ( _1 )
# 3426 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    Obj.repr(
# 667 "pitparser.mly"
        ( (* channel is allowed as a type, even though it is also a keyword for the declaration channel c1...cn. *)
          "channel", parse_extent() )
# 3433 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 672 "pitparser.mly"
        ( _1 )
# 3440 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 674 "pitparser.mly"
        ( [] )
# 3446 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 678 "pitparser.mly"
    ( _1 :: _3 )
# 3454 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 680 "pitparser.mly"
    ( [_1] )
# 3461 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 686 "pitparser.mly"
 ( PFail, parse_extent () )
# 3467 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 688 "pitparser.mly"
        ( PFunApp (_1, _3), parse_extent() )
# 3475 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    Obj.repr(
# 690 "pitparser.mly"
        ( PProj (_1,_3), parse_extent() )
# 3483 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    Obj.repr(
# 692 "pitparser.mly"
        ( Param.has_choice := true;
	  PFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 3492 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 695 "pitparser.mly"
 ( PIdent (_1), parse_extent() )
# 3499 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 697 "pitparser.mly"
        ( Param.has_integer := true; unfold_int (zero ()) _1 )
# 3506 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 699 "pitparser.mly"
        ( Param.has_integer := true; unfold_int_minus _1 _3 )
# 3514 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 701 "pitparser.mly"
        ( Param.has_integer := true; unfold_int _1 _3 )
# 3522 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 703 "pitparser.mly"
        ( Param.has_integer := true; unfold_int _3 _1 )
# 3530 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 705 "pitparser.mly"
        ( PFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 3538 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 707 "pitparser.mly"
        ( PFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 3546 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    Obj.repr(
# 709 "pitparser.mly"
        ( PFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 3553 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 711 "pitparser.mly"
        ( PFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 3561 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 713 "pitparser.mly"
        ( PFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 3569 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 715 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PTuple (l), parse_extent() )
# 3579 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 722 "pitparser.mly"
 ( _1 :: _3 )
# 3587 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 724 "pitparser.mly"
 ( [_1] )
# 3594 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 728 "pitparser.mly"
        ( _1 )
# 3601 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 730 "pitparser.mly"
        ( [] )
# 3607 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'netermseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 744 "pitparser.mly"
    ( (_1,Some _4) :: _7 )
# 3616 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 746 "pitparser.mly"
    ( [_1,Some _4] )
# 3624 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 748 "pitparser.mly"
    ( (_1,None) :: _3 )
# 3632 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 750 "pitparser.mly"
    ( [_1,None] )
# 3639 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 755 "pitparser.mly"
    ( None, [] )
# 3645 "pitparser.ml"
               : 'opt_publivars_ror))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 757 "pitparser.mly"
    ( None, _4 )
# 3652 "pitparser.ml"
               : 'opt_publivars_ror))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'optpublicvars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    Obj.repr(
# 759 "pitparser.mly"
    ( Some (_4,_7), _5 )
# 3661 "pitparser.ml"
               : 'opt_publivars_ror))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'opt_publivars_ror) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tlemmaseq) in
    Obj.repr(
# 763 "pitparser.mly"
      ( let (ror,pubvars) = _2 in (_1,ror,pubvars) :: _4 )
# 3670 "pitparser.ml"
               : 'tlemmaseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_publivars_ror) in
    Obj.repr(
# 765 "pitparser.mly"
      ( let (ror,pubvars) = _2 in [_1,ror,pubvars] )
# 3678 "pitparser.ml"
               : 'tlemmaseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tquery) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tqueryseq) in
    Obj.repr(
# 771 "pitparser.mly"
    ( _1 :: _3 )
# 3686 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tquery) in
    Obj.repr(
# 773 "pitparser.mly"
    ( [_1] )
# 3693 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optpublicvars) in
    Obj.repr(
# 777 "pitparser.mly"
    ( PRealQuery(_1,_2), parse_extent() )
# 3701 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'optpublicvars) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'options) in
    Obj.repr(
# 779 "pitparser.mly"
    ( PQSecret (_2,_3,_4), parse_extent() )
# 3710 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 781 "pitparser.mly"
    ( PPutBegin(false, _4), parse_extent() )
# 3717 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 783 "pitparser.mly"
    ( PPutBegin(true, _4), parse_extent() )
# 3724 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    Obj.repr(
# 787 "pitparser.mly"
    ( [] )
# 3730 "pitparser.ml"
               : 'optpublicvars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 789 "pitparser.mly"
    ( _2 )
# 3737 "pitparser.ml"
               : 'optpublicvars))
; (fun __caml_parser_env ->
    Obj.repr(
# 793 "pitparser.mly"
    ( None )
# 3743 "pitparser.ml"
               : 'optatident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 795 "pitparser.mly"
    ( Some _2 )
# 3750 "pitparser.ml"
               : 'optatident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gtermseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optatident) in
    Obj.repr(
# 799 "pitparser.mly"
 ( PGFunApp (_1, _3, _5), parse_extent() )
# 3759 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 801 "pitparser.mly"
  ( PGIdent (_1), parse_extent() )
# 3766 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 803 "pitparser.mly"
        ( Param.has_integer := true; unfold_gint (gzero ()) _1 )
# 3773 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 805 "pitparser.mly"
        ( Param.has_integer := true; unfold_gint _1 _3 )
# 3781 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 807 "pitparser.mly"
        ( Param.has_integer := true; unfold_gint _3 _1 )
# 3789 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 809 "pitparser.mly"
        ( Param.has_integer := true; PGFunApp(("<=", parse_extent()), [_1; _3], None), parse_extent() )
# 3797 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 811 "pitparser.mly"
        ( Param.has_integer := true; PGFunApp((">=", parse_extent()), [_1; _3], None), parse_extent() )
# 3805 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 813 "pitparser.mly"
        ( Param.has_integer := true; PGFunApp(("<", parse_extent()), [_1; _3], None), parse_extent() )
# 3813 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 815 "pitparser.mly"
        ( Param.has_integer := true; PGFunApp((">", parse_extent()), [_1; _3], None), parse_extent() )
# 3821 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'gtermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optatident) in
    Obj.repr(
# 817 "pitparser.mly"
        ( PGPhase(_1, _3, _6, _7), parse_extent() )
# 3831 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optatident) in
    Obj.repr(
# 819 "pitparser.mly"
        ( PGPhase(("table", parse_extent()), [_3], _6, _7), parse_extent() )
# 3840 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 821 "pitparser.mly"
        ( PGFunApp(("=", parse_extent()), [_1; _3], None), parse_extent() )
# 3848 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 823 "pitparser.mly"
        ( PGFunApp(("<>", parse_extent()), [_1; _3], None), parse_extent() )
# 3856 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 825 "pitparser.mly"
        ( PGFunApp(("not", parse_extent()), [_3], None), parse_extent() )
# 3863 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 827 "pitparser.mly"
        ( PGFunApp(("||", parse_extent()), [_1; _3], None), parse_extent() )
# 3871 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 829 "pitparser.mly"
        ( PGFunApp(("&&", parse_extent()), [_1; _3], None), parse_extent() )
# 3879 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 831 "pitparser.mly"
        ( PGFunApp(("choice", parse_extent()), [_3; _5], None), parse_extent() )
# 3887 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gtermseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optatident) in
    Obj.repr(
# 833 "pitparser.mly"
        ( PGFunApp(("event",parse_extent()), _3, _5), parse_extent() )
# 3895 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gtermseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optatident) in
    Obj.repr(
# 835 "pitparser.mly"
        ( PGFunApp(("inj-event",parse_extent()), _3, _5), parse_extent() )
# 3903 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optatident) in
    Obj.repr(
# 837 "pitparser.mly"
        ( PGFunApp(("table",parse_extent()), [_3], _5), parse_extent() )
# 3911 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 839 "pitparser.mly"
        ( PGFunApp(("==>", parse_extent()), [_1;_3], None), parse_extent() )
# 3919 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 841 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PGTuple (l), parse_extent() )
# 3929 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 846 "pitparser.mly"
        ( PGName (_2, _4), parse_extent() )
# 3937 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 848 "pitparser.mly"
        ( PGName (_2, []), parse_extent() )
# 3944 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 850 "pitparser.mly"
        ( PGLet(_2, _4, _6), parse_extent() )
# 3953 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 852 "pitparser.mly"
     ( PGLet(_1,_3,_5), parse_extent() )
# 3962 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 856 "pitparser.mly"
 ( _1 :: _3 )
# 3970 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 858 "pitparser.mly"
 ( [_1] )
# 3977 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 862 "pitparser.mly"
        ( _1 )
# 3984 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 864 "pitparser.mly"
        ( [] )
# 3990 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 869 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 3999 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 871 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 4007 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 873 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 4016 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 875 "pitparser.mly"
        ( [(_1, _3)] )
# 4024 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 879 "pitparser.mly"
        ( _1 )
# 4031 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 881 "pitparser.mly"
        ( [] )
# 4037 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tfnebindingseq) in
    Obj.repr(
# 887 "pitparser.mly"
        ( BFLet(_2, _4, _6) )
# 4046 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tfnebindingseq) in
    Obj.repr(
# 889 "pitparser.mly"
     ( BFLet(_1,_3,_5) )
# 4055 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optphase) in
    Obj.repr(
# 891 "pitparser.mly"
        ( BFNoUnif(_1,_3,_5) )
# 4064 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 893 "pitparser.mly"
        ( BFNoUnif(_1,[],-1) )
# 4071 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optphase) in
    Obj.repr(
# 895 "pitparser.mly"
        ( BFNoUnif(("table", parse_extent()),_3,_5) )
# 4079 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optphase) in
    Obj.repr(
# 897 "pitparser.mly"
        ( BFNoUnif(("event", parse_extent()),_3,_5) )
# 4087 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 901 "pitparser.mly"
    ( _2 )
# 4094 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 903 "pitparser.mly"
    ( -1 )
# 4100 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 907 "pitparser.mly"
    ( NoUnifValue(-_2) )
# 4107 "pitparser.ml"
               : 'nounif_value))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 909 "pitparser.mly"
    ( NoUnifValue _3 )
# 4114 "pitparser.ml"
               : 'nounif_value))
; (fun __caml_parser_env ->
    Obj.repr(
# 911 "pitparser.mly"
    ( NoUnifNegDefault )
# 4120 "pitparser.ml"
               : 'nounif_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 915 "pitparser.mly"
    ( NoUnifValue(_2) )
# 4127 "pitparser.ml"
               : 'select_value))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 917 "pitparser.mly"
    ( NoUnifValue(-_3) )
# 4134 "pitparser.ml"
               : 'select_value))
; (fun __caml_parser_env ->
    Obj.repr(
# 919 "pitparser.mly"
    ( NoUnifPosDefault )
# 4140 "pitparser.ml"
               : 'select_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 923 "pitparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 4148 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gformat) in
    Obj.repr(
# 925 "pitparser.mly"
 ( PFGFunApp (("choice", parse_extent()), [_3; _5]), parse_extent() )
# 4156 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 927 "pitparser.mly"
    ( PFGIdent (_1), parse_extent() )
# 4163 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 929 "pitparser.mly"
    ( Param.has_integer := true; unfold_pfg_int (pfg_zero ()) _1 )
# 4170 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 931 "pitparser.mly"
    ( Param.has_integer := true; unfold_pfg_int _1 _3 )
# 4178 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 933 "pitparser.mly"
    ( Param.has_integer := true; unfold_pfg_int _3 _1 )
# 4186 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 935 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PFGTuple (_2), parse_extent() )
# 4196 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 940 "pitparser.mly"
        ( PFGName (_2, _4), parse_extent() )
# 4204 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 942 "pitparser.mly"
        ( PFGName (_2, []), parse_extent() )
# 4211 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 944 "pitparser.mly"
        ( PFGAny (_2), parse_extent() )
# 4218 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 946 "pitparser.mly"
        ( PFGLet(_2, _4, _6), parse_extent() )
# 4227 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 948 "pitparser.mly"
     ( PFGLet(_1,_3,_5), parse_extent() )
# 4236 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 953 "pitparser.mly"
 ( _1 :: _3 )
# 4244 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 955 "pitparser.mly"
 ( [_1] )
# 4251 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 959 "pitparser.mly"
        ( _1 )
# 4258 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 961 "pitparser.mly"
        ( [] )
# 4264 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 966 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 4273 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 968 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 4281 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 970 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 4290 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 972 "pitparser.mly"
        ( [(_1, _3)] )
# 4298 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 976 "pitparser.mly"
        ( _1 )
# 4305 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 978 "pitparser.mly"
        ( [] )
# 4311 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 984 "pitparser.mly"
    ( true )
# 4317 "pitparser.ml"
               : 'optorfail))
; (fun __caml_parser_env ->
    Obj.repr(
# 986 "pitparser.mly"
    ( false)
# 4323 "pitparser.ml"
               : 'optorfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'neidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'optorfail) in
    Obj.repr(
# 990 "pitparser.mly"
 ( List.map (fun x -> (x,_3,_4)) _1 )
# 4332 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nemayfailvartypeseq) in
    Obj.repr(
# 994 "pitparser.mly"
 ( _1 @ _3 )
# 4340 "pitparser.ml"
               : 'nemayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mayfailvartype) in
    Obj.repr(
# 997 "pitparser.mly"
 ( _1 )
# 4347 "pitparser.ml"
               : 'nemayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nemayfailvartypeseq) in
    Obj.repr(
# 1001 "pitparser.mly"
        ( _1 )
# 4354 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 1003 "pitparser.mly"
        ( [] )
# 4360 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nemayfailvartypeseq) in
    Obj.repr(
# 1007 "pitparser.mly"
 ( _2 )
# 4367 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 1009 "pitparser.mly"
 ( [] )
# 4373 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'extended_equation) in
    Obj.repr(
# 1013 "pitparser.mly"
     ( EELet(_2,_4,_6) )
# 4382 "pitparser.ml"
               : 'extended_equation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'extended_equation) in
    Obj.repr(
# 1015 "pitparser.mly"
     ( EELet(_1,_3,_5) )
# 4391 "pitparser.ml"
               : 'extended_equation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 1017 "pitparser.mly"
    ( EETerm(_1) )
# 4398 "pitparser.ml"
               : 'extended_equation))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'extended_equation) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 1021 "pitparser.mly"
 ( (_2,_3) :: _4 )
# 4407 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'extended_equation) in
    Obj.repr(
# 1023 "pitparser.mly"
 ( [_2,_3] )
# 4415 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'extended_equation) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 1027 "pitparser.mly"
 ( (_1,_2) :: _3 )
# 4424 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'extended_equation) in
    Obj.repr(
# 1029 "pitparser.mly"
 ( [_1,_2] )
# 4432 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'extended_equation) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'treduc) in
    Obj.repr(
# 1033 "pitparser.mly"
 ( (_1,_2) :: _4 )
# 4441 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'extended_equation) in
    Obj.repr(
# 1035 "pitparser.mly"
 ( [_1,_2] )
# 4449 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'extended_equation) in
    Obj.repr(
# 1041 "pitparser.mly"
    ( [(_1, _2)] )
# 4457 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'extended_equation) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'eqlist) in
    Obj.repr(
# 1043 "pitparser.mly"
    ( (_1, _2)::_4 )
# 4466 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 1049 "pitparser.mly"
        ( PClause(_1,_3) )
# 4474 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 1051 "pitparser.mly"
        ( PFact(_1) )
# 4481 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 1053 "pitparser.mly"
        ( PEquiv(_1,_3,true) )
# 4489 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 1055 "pitparser.mly"
        ( PEquiv(_1,_3,false) )
# 4497 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tclause) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tclauses) in
    Obj.repr(
# 1059 "pitparser.mly"
 ( (_1,_2) :: _4 )
# 4506 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclause) in
    Obj.repr(
# 1061 "pitparser.mly"
 ( [_1,_2] )
# 4514 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'progoptlist) in
    Obj.repr(
# 1068 "pitparser.mly"
        ( _2 )
# 4521 "pitparser.ml"
               : 'programoptions))
; (fun __caml_parser_env ->
    Obj.repr(
# 1070 "pitparser.mly"
        ( [] )
# 4527 "pitparser.ml"
               : 'programoptions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'progopt) in
    Obj.repr(
# 1074 "pitparser.mly"
        ( [_1] )
# 4534 "pitparser.ml"
               : 'progoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'progopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'progoptlist) in
    Obj.repr(
# 1076 "pitparser.mly"
        ( _1 :: _3 )
# 4542 "pitparser.ml"
               : 'progoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 1080 "pitparser.mly"
        ( ("Write", _1,_3) )
# 4550 "pitparser.ml"
               : 'progopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 1082 "pitparser.mly"
        ( ("Read", _1,_3) )
# 4558 "pitparser.ml"
               : 'progopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'programoptions) in
    Obj.repr(
# 1086 "pitparser.mly"
        ((_1,_2))
# 4566 "pitparser.ml"
               : 'progbegin))
; (fun __caml_parser_env ->
    Obj.repr(
# 1090 "pitparser.mly"
        (true)
# 4572 "pitparser.ml"
               : 'progend))
; (fun __caml_parser_env ->
    Obj.repr(
# 1092 "pitparser.mly"
        (false)
# 4578 "pitparser.ml"
               : 'progend))
; (fun __caml_parser_env ->
    Obj.repr(
# 1098 "pitparser.mly"
    ( None )
# 4584 "pitparser.ml"
               : 'syncopt))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    Obj.repr(
# 1100 "pitparser.mly"
    ( match _4, _5, _6 with
    | ("no",_), ("tag",_), ("prefix", _) -> Some ("",parse_extent())
    | ("tag",_), ("prefix",_), id -> Some id
    | _ -> raise Parsing.Parse_error )
# 4596 "pitparser.ml"
               : 'syncopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'progbegin) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 1107 "pitparser.mly"
      ( _2 (* CryptoVerif implementation annotations ignored *) )
# 4604 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 1109 "pitparser.mly"
      ( _2 )
# 4611 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'syncopt) in
    Obj.repr(
# 1111 "pitparser.mly"
      ( PLetDef (_1, [], _2), parse_extent() )
# 4619 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'syncopt) in
    Obj.repr(
# 1113 "pitparser.mly"
      ( PLetDef (_1, _3, _5), parse_extent() )
# 4628 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 1115 "pitparser.mly"
      ( PRepl _2, parse_extent() )
# 4635 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 1117 "pitparser.mly"
      ( (* For convergence with CryptoVerif, we allow an identifier (bound on the number of copies) after a replication; it is simply ignored in ProVerif. *)
        PRepl _5, parse_extent() )
# 4645 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 1120 "pitparser.mly"
      ( (* For convergence with CryptoVerif, we allow "foreach i<=N do P"
      as a synonym for !P *)
      PRepl _6, parse_extent() )
# 4656 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 1124 "pitparser.mly"
      ( let x = _1 in
        if x = 0 then PNil, parse_extent() else
        input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 4665 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 1128 "pitparser.mly"
      ( (* For convergence with CryptoVerif, we allow yield instead of 0 *)
        PNil, parse_extent() )
# 4672 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 1131 "pitparser.mly"
      ( PRestr(_2, _3, _5, _6), parse_extent() )
# 4682 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 1133 "pitparser.mly"
      ( (* For convergence with CryptoVerif, we allow x <-R T
        as a synonym for new x: T *)
        PRestr(_1, None, _3, _4), parse_extent() )
# 4693 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 1137 "pitparser.mly"
      ( PTest(_2,_4,_5), parse_extent() )
# 4702 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'tpattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 1139 "pitparser.mly"
      ( PInput(_3,_5,_8,_7), parse_extent() )
# 4712 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'progend) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 1141 "pitparser.mly"
      ( POutput(_3,_5,_8), parse_extent() )
# 4722 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1143 "pitparser.mly"
      ( PLet(_2,_4,(PNil,parse_extent()),(PNil,parse_extent())), parse_extent() )
# 4730 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 1145 "pitparser.mly"
      ( PLet(_2,_4,_6,_7), parse_extent() )
# 4740 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'basicpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 1147 "pitparser.mly"
      ( (* For convergence with CryptoVerif, we allow x[:T] <- M; P
      as a synonym for let x[:T] = M in P *)
      PLet(_1,_3,_4,(PNil,parse_extent())), parse_extent() )
# 4751 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'options) in
    Obj.repr(
# 1151 "pitparser.mly"
      ( PLetFilter(_2,_4,(PNil,parse_extent()),(PNil,parse_extent()),_5), parse_extent() )
# 4760 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 1153 "pitparser.mly"
      ( (* Approximating the else clause with a parallel composition
      is not correct for trace reconstruction *)
      PLetFilter(_2,_4,_7,_8,_5), parse_extent() )
# 4773 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 1157 "pitparser.mly"
      ( PInsert(_2, _4, _6), parse_extent() )
# 4782 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tpatternseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'optsuchthat) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 1159 "pitparser.mly"
      ( PGet(_2, _4, _6, _8, _9,_7), parse_extent() )
# 4794 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 1161 "pitparser.mly"
      ( PPar(_1,_3), parse_extent() )
# 4802 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'newarg) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 1163 "pitparser.mly"
      ( PEvent(_2, _4, _6, _7), parse_extent() )
# 4812 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'newarg) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 1165 "pitparser.mly"
      ( PEvent(_2, [], _3, _4), parse_extent() )
# 4821 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 1167 "pitparser.mly"
      ( if (_2) <= 0 then
      input_error "Phases should be positive integers in processes" (parse_extent());
      PPhase(_2, _3), parse_extent() )
# 4831 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 1171 "pitparser.mly"
      ( if (_2) <= 0 then
      input_error "Sync numbers should be positive integers" (parse_extent());
      Param.has_barrier := true;
      PBarrier(_2, None, _3), parse_extent() )
# 4842 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 1176 "pitparser.mly"
      ( if (_2) <= 0 then
      input_error "Sync numbers should be positive integers" (parse_extent());
      Param.has_barrier := true;
      PBarrier(_2, Some _4, _6), parse_extent() )
# 4854 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 1183 "pitparser.mly"
        ( _2 )
# 4861 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 1185 "pitparser.mly"
        ( PNil, parse_extent() )
# 4867 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 1189 "pitparser.mly"
        ( _2 )
# 4874 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 1191 "pitparser.mly"
        ( PNil, parse_extent() )
# 4880 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 1195 "pitparser.mly"
        ( _2 )
# 4887 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 1197 "pitparser.mly"
        ( PNil, parse_extent() )
# 4893 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 1201 "pitparser.mly"
    ( PPatVar(_1,None) )
# 4900 "pitparser.ml"
               : 'basicpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 1203 "pitparser.mly"
    ( PPatVar(_1, Some _3) )
# 4908 "pitparser.ml"
               : 'basicpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Parsing_helper.extent) in
    Obj.repr(
# 1205 "pitparser.mly"
    ( PPatAny (_1, None) )
# 4915 "pitparser.ml"
               : 'basicpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Parsing_helper.extent) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 1207 "pitparser.mly"
    ( PPatAny (_1, Some _3) )
# 4923 "pitparser.ml"
               : 'basicpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'basicpattern) in
    Obj.repr(
# 1211 "pitparser.mly"
      ( _1 )
# 4930 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 1213 "pitparser.mly"
      ( match _2 with
      [t] -> t   (* Allow parentheses for priorities of infix operators;
        Tuples cannot have one element. *)
    | l -> PPatTuple(_2) )
# 4940 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 1218 "pitparser.mly"
      ( PPatFunApp(_1,_3) )
# 4948 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'tpattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'tpattern) in
    Obj.repr(
# 1220 "pitparser.mly"
      ( Param.has_choice := true;
        PPatChoice(("choice", parse_extent()), [_3; _5], None) )
# 4957 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'tpattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'tpattern) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 1223 "pitparser.mly"
      ( Param.has_choice := true;
        PPatChoice(("choice", parse_extent()), [_3; _5], Some _8) )
# 4967 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 1226 "pitparser.mly"
      ( Param.has_integer := true; unfold_pat_int (pat_zero()) _1 )
# 4974 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 1228 "pitparser.mly"
      ( Param.has_integer := true; unfold_pat_int _1 _3 )
# 4982 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tpattern) in
    Obj.repr(
# 1230 "pitparser.mly"
      ( Param.has_integer := true; unfold_pat_int _3 _1 )
# 4990 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1232 "pitparser.mly"
      ( PPatEqual(_2) )
# 4997 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 1236 "pitparser.mly"
    ( _1 :: _3 )
# 5005 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tpattern) in
    Obj.repr(
# 1238 "pitparser.mly"
    ( [_1] )
# 5012 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 1242 "pitparser.mly"
    ( _1 )
# 5019 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 1244 "pitparser.mly"
    ( [] )
# 5025 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 1250 "pitparser.mly"
 ( PPFunApp (_1, _3), parse_extent() )
# 5033 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 1252 "pitparser.mly"
        ( Param.has_choice := true;
	  PPFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 5042 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 1255 "pitparser.mly"
 ( PPIdent (_1), parse_extent() )
# 5049 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 1257 "pitparser.mly"
        ( Param.has_integer := true; unfold_pint (pzero ()) _1 )
# 5056 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 1259 "pitparser.mly"
        ( Param.has_integer := true; unfold_pint_minus _1 _3 )
# 5064 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 1261 "pitparser.mly"
        ( Param.has_integer := true; unfold_pint _1 _3 )
# 5072 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1263 "pitparser.mly"
        ( Param.has_integer := true; unfold_pint _3 _1 )
# 5080 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1265 "pitparser.mly"
        ( Param.has_integer := true; PPFunApp(("<", parse_extent()), [_1; _3]), parse_extent() )
# 5088 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1267 "pitparser.mly"
        ( Param.has_integer := true; PPFunApp((">", parse_extent()), [_1; _3]), parse_extent() )
# 5096 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1269 "pitparser.mly"
        ( Param.has_integer := true; PPFunApp(("<=", parse_extent()), [_1; _3]), parse_extent() )
# 5104 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1271 "pitparser.mly"
        ( Param.has_integer := true; PPFunApp((">=", parse_extent()), [_1; _3]), parse_extent() )
# 5112 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1273 "pitparser.mly"
        ( PPFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 5120 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1275 "pitparser.mly"
        ( PPFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 5128 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 1277 "pitparser.mly"
        ( PPFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 5135 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1279 "pitparser.mly"
        ( PPFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 5143 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1281 "pitparser.mly"
        ( PPFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 5151 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1283 "pitparser.mly"
        ( PPRestr(_2, _3, _5, _7), parse_extent() )
# 5161 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1285 "pitparser.mly"
        ( PPRestr(_1, None, _3, _5), parse_extent() )
# 5170 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optelseterm) in
    Obj.repr(
# 1287 "pitparser.mly"
 ( PPTest(_2,_4,_5), parse_extent() )
# 5179 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseterm) in
    Obj.repr(
# 1289 "pitparser.mly"
 ( PPLet(_2,_4,_6,_7), parse_extent() )
# 5189 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'basicpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1291 "pitparser.mly"
        ( PPLet(_1,_3,_5,None), parse_extent() )
# 5198 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseterm) in
    Obj.repr(
# 1293 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,_7), parse_extent() )
# 5208 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'optargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'newarg) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1295 "pitparser.mly"
        ( PPEvent(_2, _3, _4, _6), parse_extent() )
# 5218 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ptermseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1297 "pitparser.mly"
        ( PPInsert(_2,_4,_7), parse_extent() )
# 5227 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'tpatternseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'optsuchthat) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'options) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'optelseterm) in
    Obj.repr(
# 1299 "pitparser.mly"
        ( PPGet(_2,_4,_6,_9,_10,_7), parse_extent() )
# 5239 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 1301 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPTuple (l), parse_extent() )
# 5249 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1308 "pitparser.mly"
    ( Some _2 )
# 5256 "pitparser.ml"
               : 'optelseterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 1310 "pitparser.mly"
    ( None )
# 5262 "pitparser.ml"
               : 'optelseterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1314 "pitparser.mly"
    ( Some _2 )
# 5269 "pitparser.ml"
               : 'optsuchthat))
; (fun __caml_parser_env ->
    Obj.repr(
# 1316 "pitparser.mly"
    ( None )
# 5275 "pitparser.ml"
               : 'optsuchthat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 1320 "pitparser.mly"
    ( _2 )
# 5282 "pitparser.ml"
               : 'optargs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1322 "pitparser.mly"
    ( [] )
# 5288 "pitparser.ml"
               : 'optargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 1326 "pitparser.mly"
 ( _1 :: _3 )
# 5296 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 1328 "pitparser.mly"
 ( [_1] )
# 5303 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 1332 "pitparser.mly"
        ( _1 )
# 5310 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 1334 "pitparser.mly"
        ( [] )
# 5316 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 1340 "pitparser.mly"
    ( [_1;_3] )
# 5324 "pitparser.ml"
               : 'onepermut))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'onepermut) in
    Obj.repr(
# 1342 "pitparser.mly"
    ( _1 :: _3 )
# 5332 "pitparser.ml"
               : 'onepermut))
; (fun __caml_parser_env ->
    Obj.repr(
# 1346 "pitparser.mly"
    ( [] )
# 5338 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'onepermut) in
    Obj.repr(
# 1348 "pitparser.mly"
    ( [_1] )
# 5345 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'onepermut) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident list list) in
    Obj.repr(
# 1350 "pitparser.mly"
    ( _1 :: _3 )
# 5353 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident list) in
    Obj.repr(
# 1358 "pitparser.mly"
    ( _1 :: _3 )
# 5361 "pitparser.ml"
               : Pitptree.ident list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 1360 "pitparser.mly"
    ( [_1] )
# 5368 "pitparser.ml"
               : Pitptree.ident list))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lib *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry permut *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry order *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry term *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pitptree.tdecl list * Pitptree.tprocess_e * Pitptree.tprocess_e option)
let lib (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Pitptree.tdecl list)
let permut (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Pitptree.ident list list)
let order (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Pitptree.ident list)
let term (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Pitptree.term_e)
