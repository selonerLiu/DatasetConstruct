# 28 "pitlexertotex.mll"
 
open Parsing_helper
open Pitptree
open Fileprint

let comment_depth = ref 0
let comment_extent_list = ref []

let kinds = Hashtbl.create 7

let rec get_top_symbol_reduc = function
  | EETerm (PFunApp(("=",_), [(PFunApp((f,ext),_),_);_]),_) -> (f,ext)
  | EETerm (PFunApp(("=",_), [(_, ext1);_]),_) ->
      input_error ("In \"reduc\", all rewrite rules should begin with function application") ext1
  | EETerm (_,ext1) ->
      input_error ("In \"reduc\", all rewrite rules should be an equality between two terms") ext1
  | EELet (_,_,eq) -> get_top_symbol_reduc eq

let init_kinds d =
  Hashtbl.iter (fun keyw _ -> Hashtbl.add kinds keyw "\\kwl") Pitlexer.keyword_table;
  Hashtbl.add kinds "channel" "\\kwt";
  Hashtbl.add kinds "bitstring" "\\kwt";
  Hashtbl.add kinds "bool" "\\kwt";
  Hashtbl.add kinds "true" "\\kwc";
  Hashtbl.add kinds "false" "\\kwc";
  List.iter (function
      TTypeDecl(t,_) -> Hashtbl.add kinds t "\\kwt"
    | TFunDecl((f,_),_,_,_) -> Hashtbl.add kinds f "\\kwf"
    | TReducFail((f,_),_,_,_,_) -> Hashtbl.add kinds f "\\kwf"
    | TReduc(((_,t)::_),_) ->
        let (f,_) = get_top_symbol_reduc t in
        Hashtbl.add kinds f "\\kwf"
    | TPredDecl((p,_),_,_) -> Hashtbl.add kinds p "\\kwp"
    | TFree((c,_),_,_) -> Hashtbl.add kinds c "\\kwc"
    | TConstDecl((c,_),_,_) -> Hashtbl.add kinds c "\\kwc"
    | TTableDecl((t,_),_) -> Hashtbl.add kinds t "\\kwt"
    | TEventDecl((e,_),_) -> Hashtbl.add kinds e "\\kwe"
    | TLetFun((f,_),_,_) -> Hashtbl.add kinds f "\\kwf"
    | _ -> ()) d

let parse filename =
  try
    let ic = open_in filename in
    let lexbuf = Lexing.from_channel ic in
    lexbuf.Lexing.lex_curr_p <- { lexbuf.Lexing.lex_curr_p with
                                  Lexing.pos_fname = filename };
    let ptree =
      try
        Pitparser.all Pitlexer.token lexbuf
      with Parsing.Parse_error ->
        input_error "Syntax error" (extent lexbuf)
    in
    close_in ic;
    ptree
  with Sys_error s ->
    user_error ("File error: " ^ s)


# 61 "pitlexertotex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\223\255\224\255\031\000\094\000\095\000\003\000\239\255\
    \097\000\001\000\004\000\244\255\245\255\005\000\248\255\052\000\
    \092\000\249\255\250\255\111\000\063\001\002\000\253\255\202\000\
    \001\000\255\255\057\000\154\001\064\000\015\002\232\002\029\000\
    \013\000\031\000\023\000\018\000\225\255\247\255\103\000\104\000\
    \075\000\106\000\119\000\120\000\121\000\122\000\137\000\173\000\
    \140\000\138\000\139\000\141\000\142\000\143\000\171\000\172\000\
    \226\000\251\255\252\255\005\000\253\255\166\000\195\000\255\255\
    \254\255\231\000\252\255\253\255\006\000\254\255\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\027\000\025\000\018\000\017\000\255\255\
    \015\000\032\000\012\000\255\255\255\255\009\000\255\255\007\000\
    \007\000\255\255\255\255\004\000\004\000\003\000\255\255\001\000\
    \000\000\255\255\255\255\255\255\014\000\004\000\004\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\013\000\012\000\
    \255\255\015\000\024\000\019\000\018\000\025\000\023\000\028\000\
    \020\000\022\000\020\000\029\000\028\000\021\000\027\000\026\000\
    \255\255\255\255\255\255\002\000\255\255\004\000\004\000\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000\000\000\255\255\000\000\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \057\000\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\066\000\000\000\000\000\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\025\000\025\000\021\000\024\000\021\000\060\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\014\000\017\000\006\000\039\000\013\000\009\000\028\000\
    \015\000\014\000\014\000\006\000\013\000\005\000\014\000\014\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\007\000\014\000\004\000\008\000\003\000\054\000\
    \018\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\014\000\055\000\014\000\037\000\028\000\
    \028\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\020\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\012\000\010\000\011\000\045\000\044\000\
    \038\000\041\000\032\000\033\000\034\000\035\000\036\000\038\000\
    \039\000\042\000\041\000\047\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\019\000\042\000\
    \043\000\044\000\045\000\048\000\046\000\043\000\040\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\046\000\049\000\050\000\050\000\051\000\052\000\053\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\049\000\054\000\055\000\052\000\019\000\064\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\027\000\053\000\060\000\063\000\000\000\059\000\
    \026\000\069\000\000\000\000\000\068\000\006\000\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\004\000\008\000\
    \003\000\070\000\062\000\000\000\061\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\010\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\019\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\029\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\000\000\000\000\000\000\000\000\006\000\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\008\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\058\000\000\000\000\000\000\000\000\000\067\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\010\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\019\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\030\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\000\000\000\000\000\000\000\000\019\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\024\000\000\000\000\000\021\000\059\000\
    \068\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\006\000\010\000\013\000\000\000\009\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\000\000\015\000\026\000\
    \028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\005\000\
    \010\000\008\000\031\000\032\000\033\000\034\000\035\000\038\000\
    \039\000\040\000\041\000\004\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\019\000\042\000\
    \043\000\044\000\045\000\004\000\004\000\005\000\008\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\046\000\049\000\050\000\048\000\051\000\052\000\053\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\048\000\054\000\055\000\047\000\019\000\061\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\023\000\047\000\056\000\062\000\255\255\056\000\
    \023\000\065\000\255\255\255\255\065\000\023\000\255\255\023\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\023\000\023\000\
    \023\000\065\000\056\000\255\255\056\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\023\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\020\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\255\255\255\255\255\255\255\255\020\000\255\255\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\027\000\255\255\255\255\255\255\255\255\255\255\
    \027\000\255\255\255\255\255\255\255\255\027\000\255\255\027\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\027\000\027\000\
    \027\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\056\000\255\255\255\255\255\255\255\255\065\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\027\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\029\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\255\255\255\255\255\255\255\255\029\000\255\255\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\255\255\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\255\255\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\030\000\
    \255\255\255\255\255\255\255\255\255\255\030\000\255\255\255\255\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\255\255\255\255\255\255\255\255\030\000\
    \255\255\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\255\255\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\255\255\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 89 "pitlexertotex.mll"
    ( print_string " $\\\\\n$";
      Lexing.new_line lexbuf; token lexbuf )
# 369 "pitlexertotex.ml"

  | 1 ->
# 92 "pitlexertotex.mll"
     ( print_string "\\ "; token lexbuf )
# 374 "pitlexertotex.ml"

  | 2 ->
# 94 "pitlexertotex.mll"
     ( print_string "\\qquad\\qquad "; token lexbuf )
# 379 "pitlexertotex.ml"

  | 3 ->
# 96 "pitlexertotex.mll"
     ( token lexbuf )
# 384 "pitlexertotex.ml"

  | 4 ->
# 98 "pitlexertotex.mll"
     (
       let s = Lexing.lexeme lexbuf in
       begin
	 try
           let k = Hashtbl.find kinds s  in
	   print_string (k ^ "{");
	   print_sanitize s;
	   print_string "}"
	 with Not_found ->
	   print_string "\\var{";
	   print_sanitize s;
	   print_string "}"
       end;
       token lexbuf
     )
# 403 "pitlexertotex.ml"

  | 5 ->
# 113 "pitlexertotex.mll"
      ( print_string "\\string@"; token lexbuf  )
# 408 "pitlexertotex.ml"

  | 6 ->
# 115 "pitlexertotex.mll"
    ( print_string "\\textit{\"";
      string lexbuf )
# 414 "pitlexertotex.ml"

  | 7 ->
# 118 "pitlexertotex.mll"
     ( print_string (Lexing.lexeme lexbuf); token lexbuf )
# 419 "pitlexertotex.ml"

  | 8 ->
# 119 "pitlexertotex.mll"
       (
      comment_depth := 1;
      comment_extent_list := (extent lexbuf) :: !comment_extent_list;
         print_string "\\textit{(*";
         comment lexbuf
       )
# 429 "pitlexertotex.ml"

  | 9 ->
# 125 "pitlexertotex.mll"
              ( print_string ", "; token lexbuf )
# 434 "pitlexertotex.ml"

  | 10 ->
# 126 "pitlexertotex.mll"
      ( print_string "\\{"; token lexbuf )
# 439 "pitlexertotex.ml"

  | 11 ->
# 127 "pitlexertotex.mll"
      ( print_string "\\}"; token lexbuf )
# 444 "pitlexertotex.ml"

  | 12 ->
# 128 "pitlexertotex.mll"
                      ( print_string "\\mid"; token lexbuf )
# 449 "pitlexertotex.ml"

  | 13 ->
# 129 "pitlexertotex.mll"
                       ( print_string (if !nice_tex then "\\vee" else "\\mid\\mid"); token lexbuf )
# 454 "pitlexertotex.ml"

  | 14 ->
# 130 "pitlexertotex.mll"
                       ( print_string (if !nice_tex then "\\wedge" else "\\ \\&\\&\\ "); token lexbuf )
# 459 "pitlexertotex.ml"

  | 15 ->
# 131 "pitlexertotex.mll"
                      ( print_string " = "; token lexbuf )
# 464 "pitlexertotex.ml"

  | 16 ->
# 132 "pitlexertotex.mll"
      ( print_string "{:}"; token lexbuf )
# 469 "pitlexertotex.ml"

  | 17 ->
# 133 "pitlexertotex.mll"
                      ( print_string " + "; token lexbuf )
# 474 "pitlexertotex.ml"

  | 18 ->
# 134 "pitlexertotex.mll"
                      ( print_string " - "; token lexbuf )
# 479 "pitlexertotex.ml"

  | 19 ->
# 135 "pitlexertotex.mll"
                       ( print_string (if !nice_tex then "\\rightarrow " else "\\ {-}{>}\\ "); token lexbuf )
# 484 "pitlexertotex.ml"

  | 20 ->
# 136 "pitlexertotex.mll"
                       ( print_string (if !nice_tex then "\\leq " else "\\ {<}{=}\\ "); token lexbuf )
# 489 "pitlexertotex.ml"

  | 21 ->
# 137 "pitlexertotex.mll"
                        ( print_string (if !nice_tex then "\\leftrightarrow " else "\\ {<}{-}{>}\\ "); token lexbuf )
# 494 "pitlexertotex.ml"

  | 22 ->
# 138 "pitlexertotex.mll"
                        ( print_string (if !nice_tex then "\\Leftrightarrow " else "\\ {<}{=}{>}\\ "); token lexbuf )
# 499 "pitlexertotex.ml"

  | 23 ->
# 139 "pitlexertotex.mll"
                       ( print_string (if !nice_tex then "\\neq " else "\\ {<}{>}\\ "); token lexbuf )
# 504 "pitlexertotex.ml"

  | 24 ->
# 140 "pitlexertotex.mll"
                        ( print_string (if !nice_tex then "\\Longrightarrow " else "\\ {=}{=}{>}\\ "); token lexbuf )
# 509 "pitlexertotex.ml"

  | 25 ->
# 141 "pitlexertotex.mll"
                      ( print_string " < "; token lexbuf )
# 514 "pitlexertotex.ml"

  | 26 ->
# 142 "pitlexertotex.mll"
                       ( print_string (if !nice_tex then "\\geq " else "\\ {>}{=}\\ "); token lexbuf )
# 519 "pitlexertotex.ml"

  | 27 ->
# 143 "pitlexertotex.mll"
                      ( print_string " > "; token lexbuf )
# 524 "pitlexertotex.ml"

  | 28 ->
# 144 "pitlexertotex.mll"
                       ( print_string (if !nice_tex then "\\leftarrow " else "\\ {<}{-}\\ "); token lexbuf )
# 529 "pitlexertotex.ml"

  | 29 ->
# 145 "pitlexertotex.mll"
                        ( print_string (if !nice_tex then "\\getR " else "\\ {<}{-}{R}\\ "); token lexbuf )
# 534 "pitlexertotex.ml"

  | 30 ->
# 146 "pitlexertotex.mll"
              ( print_string "\\kwl{inj\\textbf{-}event}"; token lexbuf )
# 539 "pitlexertotex.ml"

  | 31 ->
# 147 "pitlexertotex.mll"
      (  print_string "$\n\\end{tabbing}\n" )
# 544 "pitlexertotex.ml"

  | 32 ->
# 148 "pitlexertotex.mll"
    ( internal_error ((get_extent_string true (extent lexbuf)) ^ "Illegal character (should have been detected in previous pass)") )
# 549 "pitlexertotex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 56
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 151 "pitlexertotex.mll"
       (
    print_string "(*";
    incr comment_depth;
    comment_extent_list := (extent lexbuf) :: !comment_extent_list;
    comment lexbuf )
# 565 "pitlexertotex.ml"

  | 1 ->
# 157 "pitlexertotex.mll"
    (
      print_string "*)";
      decr comment_depth;
      comment_extent_list := List.tl !comment_extent_list;
      if !comment_depth = 0 then
      begin
        print_string "}"; 
        token lexbuf
      end
      else comment lexbuf
    )
# 580 "pitlexertotex.ml"

  | 2 ->
# 169 "pitlexertotex.mll"
     ( print_string "}$\\\\\n$\\textit{"; 
       Lexing.new_line lexbuf; comment lexbuf )
# 586 "pitlexertotex.ml"

  | 3 ->
# 171 "pitlexertotex.mll"
      ( internal_error ((get_extent_string true (List.hd !comment_extent_list)) ^ "Unterminated comment") )
# 591 "pitlexertotex.ml"

  | 4 ->
# 172 "pitlexertotex.mll"
    ( print_sanitize (Lexing.lexeme lexbuf); comment lexbuf )
# 596 "pitlexertotex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 65
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 175 "pitlexertotex.mll"
       ( print_string "\"}";
         token lexbuf )
# 609 "pitlexertotex.ml"

  | 1 ->
# 178 "pitlexertotex.mll"
    ( print_string "}$\\\\\n$\\textit{";
      Lexing.new_line lexbuf; string lexbuf )
# 615 "pitlexertotex.ml"

  | 2 ->
# 181 "pitlexertotex.mll"
    ( internal_error ((get_extent_string true (extent lexbuf)) ^ "Unterminated string (should have been detected in previous pass)") )
# 620 "pitlexertotex.ml"

  | 3 ->
# 182 "pitlexertotex.mll"
    ( print_sanitize (Lexing.lexeme lexbuf); string lexbuf )
# 625 "pitlexertotex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

# 184 "pitlexertotex.mll"
 

let convert filename =
  try
    let ic = open_in filename in
    let lexbuf = Lexing.from_channel ic in
    lexbuf.Lexing.lex_curr_p <- { lexbuf.Lexing.lex_curr_p with
                                  Lexing.pos_fname = filename };
    print_preamble();
    print_string "\\begin{tabbing}\n$";
    token lexbuf;
    close_in ic
  with Sys_error s ->
    user_error ("File error: " ^ s)

let converttotex f =
  let (d,_,_) = parse f in
  init_kinds d;
  convert f


# 654 "pitlexertotex.ml"
